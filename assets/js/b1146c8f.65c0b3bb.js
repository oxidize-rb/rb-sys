"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[784],{3779:(e,n,i)=>{i.d(n,{A:()=>o});i(6540);const r={languageCallout:"languageCallout_VNpC",ruby:"ruby_iFYN",rust:"rust_PB7z",header:"header_itAP",icon:"icon_vHP_",title:"title_Bire",content:"content_ZrzH"};var s=i(4164),l=i(4848);function o({language:e,icon:n=!0,title:i,children:o}){const t=i||("ruby"===e?"Ruby":"Rust");return(0,l.jsxs)("div",{className:(0,s.A)(r.languageCallout,r[e]),children:[(0,l.jsxs)("div",{className:r.header,children:[n&&(0,l.jsx)("div",{className:r.icon,children:"ruby"===e?(0,l.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,l.jsx)("path",{d:"M6 3h12l4 6-10 12L2 9l4-6z",strokeLinejoin:"round"}),(0,l.jsx)("path",{d:"M12 21L2 9h20",strokeLinejoin:"round"})]}):(0,l.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,l.jsx)("circle",{cx:"12",cy:"12",r:"8"}),(0,l.jsx)("path",{d:"M12 4v2M12 18v2M4 12H6M18 12h2M6.34 6.34l1.42 1.42M16.24 16.24l1.42 1.42M6.34 17.66l1.42-1.42M16.24 7.76l1.42-1.42"}),(0,l.jsx)("path",{d:"M9 12a3 3 0 1 0 6 0 3 3 0 0 0-6 0z"})]})}),(0,l.jsx)("div",{className:r.title,children:t})]}),(0,l.jsx)("div",{className:r.content,children:o})]})}},5786:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"debugging","title":"Debugging & Troubleshooting","description":"This chapter covers techniques for debugging Rust-based Ruby extensions, common error patterns, and approaches to","source":"@site/docs/debugging.mdx","sourceDirName":".","slug":"/debugging","permalink":"/docs/debugging","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/debugging.mdx","tags":[],"version":"current","lastUpdatedBy":"Ian Ker-Seymer","lastUpdatedAt":1752632597000,"sidebarPosition":14,"frontMatter":{"id":"debugging","title":"Debugging & Troubleshooting","sidebar_position":14},"sidebar":"docsSidebar","previous":{"title":"Testing","permalink":"/docs/testing"},"next":{"title":"Troubleshooting","permalink":"/docs/troubleshooting"}}');var s=i(4848),l=i(8453),o=i(3779);const t={id:"debugging",title:"Debugging & Troubleshooting",sidebar_position:14},d="Debugging & Troubleshooting",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Common Errors and Solutions",id:"common-errors-and-solutions",level:2},{value:"Compilation Errors",id:"compilation-errors",level:3},{value:"Missing Ruby Headers",id:"missing-ruby-headers",level:4},{value:"Incompatible Ruby Version",id:"incompatible-ruby-version",level:4},{value:"Linking Errors",id:"linking-errors",level:4},{value:"Runtime Errors",id:"runtime-errors",level:3},{value:"Segmentation Faults",id:"segmentation-faults",level:4},{value:"Already Borrowed: BorrowMutError",id:"already-borrowed-borrowmuterror",level:4},{value:"Method Argument Mismatch",id:"method-argument-mismatch",level:4},{value:"Type Conversion Failures",id:"type-conversion-failures",level:4},{value:"Debugging Techniques",id:"debugging-techniques",level:2},{value:"Using Backtraces",id:"using-backtraces",level:3},{value:"VSCode + LLDB",id:"vscode--lldb",level:3},{value:"Debugging the Ruby C API",id:"debugging-the-ruby-c-api",level:3},{value:"Compiling Ruby with debug symbols and source code",id:"compiling-ruby-with-debug-symbols-and-source-code",level:4},{value:"LLDB from the Command Line",id:"lldb-from-the-command-line",level:3},{value:"GDB for Linux",id:"gdb-for-linux",level:3},{value:"Rust Debugging Statements",id:"rust-debugging-statements",level:3},{value:"Memory Leak Detection",id:"memory-leak-detection",level:2},{value:"Using ruby_memcheck",id:"using-ruby_memcheck",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"debugging--troubleshooting",children:"Debugging & Troubleshooting"})}),"\n",(0,s.jsx)(n.p,{children:"This chapter covers techniques for debugging Rust-based Ruby extensions, common error patterns, and approaches to\nsolving the most frequent issues."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["To debug Rust extensions, you can use either LLDB or GDB. First, you will need to compile with the ",(0,s.jsx)(n.code,{children:"dev"})," Cargo profile,\nso debug symbols are available."]}),"\n",(0,s.jsxs)(n.p,{children:["To do that you can run: ",(0,s.jsx)(n.code,{children:"RB_SYS_CARGO_PROFILE=dev rake compile"}),". Alternatively, you can add a helper Rake task to make\nthis easier:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Rakefile\n\ndesc "Compile the extension with debug symbols"\ntask "compile:debug" do\n  ENV["RB_SYS_CARGO_PROFILE"] = "dev"\n  Rake::Task["compile"].invoke\nend\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://join.slack.com/t/oxidize-rb/shared_invite/zt-16zv5tqte-Vi7WfzxCesdo2TqF_RYBCw",children:"Join the Slack channel"})," to ask questions and get help from the community!"]})}),"\n",(0,s.jsx)(n.h2,{id:"common-errors-and-solutions",children:"Common Errors and Solutions"}),"\n",(0,s.jsx)(n.h3,{id:"compilation-errors",children:"Compilation Errors"}),"\n",(0,s.jsx)(n.h4,{id:"missing-ruby-headers",children:"Missing Ruby Headers"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"fatal error: ruby.h: No such file or directory\n#include <ruby.h>\n         ^~~~~~~~\ncompilation terminated.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure Ruby development headers are installed"}),"\n",(0,s.jsxs)(n.li,{children:["Check that ",(0,s.jsx)(n.code,{children:"rb_sys::activate()"})," is being called in your ",(0,s.jsx)(n.code,{children:"build.rs"})]}),"\n",(0,s.jsx)(n.li,{children:"Verify that your Ruby installation is accessible to your build environment"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"incompatible-ruby-version",children:"Incompatible Ruby Version"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"error: failed to run custom build command for `rb-sys v0.9.78`\n"})}),"\n",(0,s.jsx)(n.p,{children:"With details mentioning Ruby version compatibility issues."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure your rb-sys version is compatible with your Ruby version"}),"\n",(0,s.jsx)(n.li,{children:"Update rb-sys to the latest version"}),"\n",(0,s.jsxs)(n.li,{children:["Check your build environment's Ruby version with ",(0,s.jsx)(n.code,{children:"ruby -v"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"linking-errors",children:"Linking Errors"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"error: linking with `cc` failed: exit status: 1\n... undefined reference to `rb_define_module` ...\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensure proper linking configuration in ",(0,s.jsx)(n.code,{children:"build.rs"})]}),"\n",(0,s.jsxs)(n.li,{children:["Make sure you've called ",(0,s.jsx)(n.code,{children:"rb_sys::activate()"})]}),"\n",(0,s.jsx)(n.li,{children:"Verify that your Ruby installation is correctly detected"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"runtime-errors",children:"Runtime Errors"}),"\n",(0,s.jsx)(n.h4,{id:"segmentation-faults",children:"Segmentation Faults"}),"\n",(0,s.jsx)(n.p,{children:"Segmentation faults typically occur when accessing memory improperly:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common Causes:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Accessing Ruby objects after they've been garbage collected"}),"\n",(0,s.jsx)(n.li,{children:"Not protecting Ruby values from garbage collection during C API calls"}),"\n",(0,s.jsx)(n.li,{children:"Incorrect use of raw pointers"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"TypedData"})," and implement the ",(0,s.jsx)(n.code,{children:"mark"})," method to protect Ruby objects"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"rb_gc_guard!"})," macro when working with raw C API"]}),"\n",(0,s.jsx)(n.li,{children:"Prefer the higher-level Magnus API over raw rb-sys"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"already-borrowed-borrowmuterror",children:"Already Borrowed: BorrowMutError"}),"\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.code,{children:"RefCell"})," for interior mutability:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"thread '<unnamed>' panicked at 'already borrowed: BorrowMutError', ...\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Complete all immutable borrows before attempting mutable borrows"}),"\n",(0,s.jsx)(n.li,{children:"Copy required data out of immutable borrows before borrowing mutably"}),"\n",(0,s.jsxs)(n.li,{children:["See the ",(0,s.jsx)(n.a,{href:"memory-management",children:"RefCell and Interior Mutability"})," section in the Memory Management chapter"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"method-argument-mismatch",children:"Method Argument Mismatch"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ArgumentError: wrong number of arguments (given 2, expected 1)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check method definitions in your Rust code"}),"\n",(0,s.jsxs)(n.li,{children:["Ensure ",(0,s.jsx)(n.code,{children:"function!"})," and ",(0,s.jsx)(n.code,{children:"method!"})," macros have the correct arity"]}),"\n",(0,s.jsx)(n.li,{children:"Verify Ruby method calls match the defined signatures"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"type-conversion-failures",children:"Type Conversion Failures"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"TypeError: no implicit conversion of Integer into String\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add proper type checking and conversions in Rust"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"try_convert"})," and handle conversion errors gracefully"]}),"\n",(0,s.jsx)(n.li,{children:"Add explicit type annotations to clarify intent"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"debugging-techniques",children:"Debugging Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"using-backtraces",children:"Using Backtraces"}),"\n",(0,s.jsx)(n.p,{children:"Ruby's built-in backtraces can help identify where problems originate:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"begin\n  # Code that might raise an exception\n  MyExtension.problematic_method\nrescue => e\n  puts e.message\n  puts e.backtrace\nend\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can enhance backtraces with the ",(0,s.jsx)(n.code,{children:"backtrace"})," gem:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'backtrace'\nBacktrace.enable_ruby_source_inspect!\n\nbegin\n  MyExtension.problematic_method\nrescue => e\n  puts Backtrace.for(e)\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"vscode--lldb",children:"VSCode + LLDB"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb",children:"code-lldb"})," extension for VSCode is a great\nway to debug Rust code. Here is an example configuration file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// .vscode/launch.json\n{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "type": "lldb",\n      "request": "launch",\n      "name": "Debug",\n      "preLaunchTask": {\n        "task": "compile:debug",\n        "type": "rake"\n      },\n      "program": "~/.asdf/installs/ruby/3.1.1/bin/ruby",\n      "args": ["-Ilib", "test/test_helper.rb"],\n      "cwd": "${workspaceFolder}",\n      "sourceLanguages": ["rust"]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"debugging-the-ruby-c-api",children:"Debugging the Ruby C API"}),"\n",(0,s.jsx)(n.p,{children:"With this basic setup, you can set breakpoints and interactively debug your Rust code. However, if Ruby is not built\nwith debug symbols, any calls into the Ruby C API become a black box. Luckily, it's straight-forward to fix this."}),"\n",(0,s.jsx)(n.h4,{id:"compiling-ruby-with-debug-symbols-and-source-code",children:"Compiling Ruby with debug symbols and source code"}),"\n",(0,s.jsx)(o.A,{language:"ruby",title:"Using chruby or ruby-build",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'# First, compile Ruby like so:\n$ RUBY_CFLAGS="-Og -ggdb" ruby-build --keep 3.1.2 /opt/rubies/3.1.2-debug\n\n# Make sure your .vscode/launch.json file is configured to use /opt/rubies/3.1.2-debug/bin/ruby.\n'})})}),"\n",(0,s.jsx)(o.A,{language:"ruby",title:"Using rbenv",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'# First, compile Ruby like so:\n$ RUBY_CFLAGS="-Og -ggdb" rbenv install --keep 3.1.2\n\n# Make sure your .vscode/launch.json file is configured to use $RBENV_ROOT/versions/3.1.2/bin/ruby.\n'})})}),"\n",(0,s.jsx)(n.h3,{id:"lldb-from-the-command-line",children:"LLDB from the Command Line"}),"\n",(0,s.jsx)(n.p,{children:"LLDB is an excellent tool for debugging Rust extensions from the command line:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Compile with debug symbols:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'RUSTFLAGS="-g" bundle exec rake compile\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run Ruby with LLDB:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lldb -- ruby -I lib -e 'require \"my_extension\"; MyExtension.method_to_debug'\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Set breakpoints and run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"(lldb) breakpoint set --name rb_my_method\n(lldb) run\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Common LLDB commands:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bt"})," - Display backtrace"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"frame variable"})," - Show local variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"p expression"})," - Evaluate expression"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," - Step over"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"s"})," - Step into"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"c"})," - Continue"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"gdb-for-linux",children:"GDB for Linux"}),"\n",(0,s.jsx)(n.p,{children:"GDB offers similar capabilities to LLDB on Linux systems:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Compile with debug symbols:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'RUSTFLAGS="-g" bundle exec rake compile\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run Ruby with GDB:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gdb --args ruby -I lib -e 'require \"my_extension\"; MyExtension.method_to_debug'\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Set breakpoints and run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"(gdb) break rb_my_method\n(gdb) run\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Common GDB commands:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bt"})," - Display backtrace"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"info locals"})," - Show local variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"p expression"})," - Evaluate expression"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," - Step over"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"s"})," - Step into"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"c"})," - Continue"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rust-debugging-statements",children:"Rust Debugging Statements"}),"\n",(0,s.jsx)(n.p,{children:"Strategic use of Rust's debug facilities can help identify issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust,ignore",children:'// Debug prints only included in debug builds\n#[cfg(debug_assertions)]\nprintln!("Debug: counter value = {}", counter);\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// More structured logging\nuse log::{debug, error, info};\nuse std::error::Error;\nuse magnus::Ruby;\n\nfn fallible_operation() -> Result<(), Box<dyn Error>> {\n    // Simulate a fallible operation\n    Ok(())\n}\n\nfn some_function() -> Result<(), Box<dyn Error>> {\n    debug!("Entering some_function");\n\n    if let Err(e) = fallible_operation() {\n        error!("Operation failed: {}", e);\n        return Err(e.into());\n    }\n\n    info!("Operation succeeded");\n    Ok(())\n}\n\nfn init(ruby: &Ruby) -> Result<(), Box<dyn Error>> {\n    env_logger::init();\n    // Rest of initialization...\n    Ok(())\n}\n\nfn main() {\n    // Example usage\n    let _ = some_function();\n    let _ = init(&unsafe { Ruby::get_unchecked() });\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"And set the log level when running Ruby:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"RUST_LOG=debug ruby -I lib -e 'require \"my_extension\"'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"memory-leak-detection",children:"Memory Leak Detection"}),"\n",(0,s.jsx)(n.h3,{id:"using-ruby_memcheck",children:"Using ruby_memcheck"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/Shopify/ruby_memcheck",children:"ruby_memcheck"})," gem helps identify memory leaks in Ruby extensions by\nfiltering out Ruby's internal memory management noise when running Valgrind."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Install dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gem install ruby_memcheck\n# On Debian/Ubuntu\napt-get install valgrind\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Set up in your Rakefile:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'require \'ruby_memcheck\'\n\ntest_config = lambda do |t|\n  t.libs << "test"\n  t.test_files = FileList["test/**/*_test.rb"]\nend\n\nnamespace :test do\n  RubyMemcheck::TestTask.new(valgrind: :compile, &test_config)\nend\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run memory leak detection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bundle exec rake test:valgrind\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For more detailed instructions and configuration options, refer to the\n",(0,s.jsx)(n.a,{href:"https://github.com/Shopify/ruby_memcheck",children:"ruby_memcheck documentation"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add Meaningful Error Messages"}),": Make your error messages descriptive and helpful"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Edge Cases"}),": Thoroughly test edge cases like nil values, empty strings, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintain a Test Suite"}),": Comprehensive tests catch issues early"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Memory Safety Features"}),": Leverage Rust's safety features rather than bypassing them"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provide Debugging Symbols"}),": Always include debug symbol builds for better debugging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document Troubleshooting"}),": Add a troubleshooting section to your extension's documentation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Log Appropriately"}),": Include contextual information in log messages"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Build your extension with ",(0,s.jsx)(n.code,{children:"RB_SYS_CARGO_PROFILE=dev"})," and practice setting breakpoints."]}),"\n",(0,s.jsx)(n.li,{children:"Explore GDB as an alternative to LLDB for low-level debugging."}),"\n",(0,s.jsx)(n.li,{children:"See the Memory Management & Safety chapter for GC-related troubleshooting."}),"\n",(0,s.jsxs)(n.li,{children:["If you're still stuck, ",(0,s.jsx)(n.a,{href:"https://join.slack.com/t/oxidize-rb/shared_invite/zt-16zv5tqte-Vi7WfzxCesdo2TqF_RYBCw",children:"join the Slack channel"})," to ask questions and get help from the community!"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var r=i(6540);const s={},l=r.createContext(s);function o(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);