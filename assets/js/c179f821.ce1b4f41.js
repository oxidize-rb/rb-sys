"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[110],{6387:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"quick-start","title":"\ud83d\ude80 Quick Start (15 minutes)","description":"Build your first Ruby extension with Rust in 15 minutes. Step-by-step tutorial with a real working example.","source":"@site/docs/quick-start.mdx","sourceDirName":".","slug":"/quick-start","permalink":"/docs/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/quick-start.mdx","tags":[],"version":"current","lastUpdatedBy":"Ian Ker-Seymer","lastUpdatedAt":1752599549000,"sidebarPosition":3,"frontMatter":{"id":"quick-start","title":"\ud83d\ude80 Quick Start (15 minutes)","sidebar_position":3,"keywords":["quick start","tutorial","first extension","ruby rust","example"],"description":"Build your first Ruby extension with Rust in 15 minutes. Step-by-step tutorial with a real working example."},"sidebar":"docsSidebar","previous":{"title":"Installation & Setup","permalink":"/docs/getting-started"},"next":{"title":"Core Concepts","permalink":"/docs/core-concepts"}}');var i=s(4848),r=s(8453);const l={id:"quick-start",title:"\ud83d\ude80 Quick Start (15 minutes)",sidebar_position:3,keywords:["quick start","tutorial","first extension","ruby rust","example"],description:"Build your first Ruby extension with Rust in 15 minutes. Step-by-step tutorial with a real working example."},a="\ud83d\ude80 Quick Start: Your First Extension",d={},o=[{value:"\ud83c\udfaf What We&#39;re Building",id:"-what-were-building",level:2},{value:"Step 1: Create Your Gem (2 minutes)",id:"step-1-create-your-gem-2-minutes",level:2},{value:"Step 2: Write Your Rust Code (5 minutes)",id:"step-2-write-your-rust-code-5-minutes",level:2},{value:"Add the Unicode dependency:",id:"add-the-unicode-dependency",level:3},{value:"Step 3: Build Your Extension (2 minutes)",id:"step-3-build-your-extension-2-minutes",level:2},{value:"Step 4: Add Tests &amp; Benchmarks (3 minutes)",id:"step-4-add-tests--benchmarks-3-minutes",level:2},{value:"Step 5: Run Tests &amp; See Results (3 minutes)",id:"step-5-run-tests--see-results-3-minutes",level:2},{value:"Step 6: Try It Yourself! (2 minutes)",id:"step-6-try-it-yourself-2-minutes",level:2},{value:"\ud83c\udf86 Bonus: Add More Features (Optional)",id:"-bonus-add-more-features-optional",level:2},{value:"\ud83d\udce6 Publishing Your Gem",id:"-publishing-your-gem",level:2},{value:"\ud83c\udf93 What You Learned",id:"-what-you-learned",level:2},{value:"\ud83c\udfc1 Challenge Yourself",id:"-challenge-yourself",level:2},{value:"\ud83d\udcda Continue Learning",id:"-continue-learning",level:2},{value:"\ud83e\udde0 Core Concepts",id:"-core-concepts",level:3},{value:"\ud83d\udd28 Project Setup",id:"-project-setup",level:3},{value:"\ud83d\udcdd Working with Ruby Objects",id:"-working-with-ruby-objects",level:3},{value:"\u26a1 Performance Guide",id:"-performance-guide",level:3},{value:"\ud83c\udf89 Congratulations!",id:"-congratulations",level:3}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-quick-start-your-first-extension",children:"\ud83d\ude80 Quick Start: Your First Extension"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time:"})," 15 minutes | ",(0,i.jsx)(n.strong,{children:"Difficulty:"})," Beginner | ",(0,i.jsx)(n.strong,{children:"Prerequisites:"})," ",(0,i.jsx)(n.a,{href:"getting-started",children:"Installation complete"})]}),"\n",(0,i.jsxs)(n.p,{children:["Let's build a working Ruby gem with Rust that's ",(0,i.jsx)(n.strong,{children:"10x faster"})," than pure Ruby. We'll create a string manipulation library that showcases Rust's speed and safety."]}),"\n",(0,i.jsx)(n.h2,{id:"-what-were-building",children:"\ud83c\udfaf What We're Building"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"FastStrings"})," gem that provides:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Lightning-fast string reversal"}),"\n",(0,i.jsx)(n.li,{children:"Safe Unicode handling"}),"\n",(0,i.jsx)(n.li,{children:"Performance benchmarks showing 10x speedup"}),"\n"]}),"\n",(0,i.jsx)("div",{className:"demo-preview",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require "fast_strings"\n\n# Pure Ruby: 2.5 seconds for 1M iterations\n# Our Rust version: 0.25 seconds! \ud83d\ude80\nFastStrings.reverse("Hello \ud83d\udc4b World!")\n# => "!dlroW \ud83d\udc4b olleH"\n'})})}),"\n",(0,i.jsx)(n.h2,{id:"step-1-create-your-gem-2-minutes",children:"Step 1: Create Your Gem (2 minutes)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create a new gem with Rust support\nbundle gem --ext=rust fast_strings\ncd fast_strings\n"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"\ud83d\udce6 What did Bundler create?"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"fast_strings/\n\u251c\u2500\u2500 Gemfile              # Ruby dependencies\n\u251c\u2500\u2500 fast_strings.gemspec # Gem metadata\n\u251c\u2500\u2500 Rakefile             # Build tasks\n\u251c\u2500\u2500 ext/fast_strings/    # \u2b50 Rust extension\n\u2502   \u251c\u2500\u2500 Cargo.toml       # Rust dependencies\n\u2502   \u251c\u2500\u2500 extconf.rb       # Build configuration\n\u2502   \u2514\u2500\u2500 src/\n\u2502       \u2514\u2500\u2500 lib.rs        # Rust code\n\u2514\u2500\u2500 lib/\n    \u2514\u2500\u2500 fast_strings.rb  # Ruby wrapper\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"step-2-write-your-rust-code-5-minutes",children:"Step 2: Write Your Rust Code (5 minutes)"}),"\n",(0,i.jsx)(n.p,{children:"Replace the default code with our fast string implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// ext/fast_strings/src/lib.rs\nuse magnus::{function, prelude::*, Error, Ruby};\nuse unicode_segmentation::UnicodeSegmentation;\n\n/// Reverses a string preserving Unicode grapheme clusters\nfn reverse_string(input: String) -> String {\n    input\n        .graphemes(true)  // true = extended grapheme clusters\n        .rev()\n        .collect()\n}\n\n/// Calculate Levenshtein distance between two strings\nfn levenshtein_distance(s1: String, s2: String) -> usize {\n    let len1 = s1.chars().count();\n    let len2 = s2.chars().count();\n    let mut matrix = vec![vec![0; len2 + 1]; len1 + 1];\n    \n    // Initialize first column\n    for (i, row) in matrix.iter_mut().enumerate() {\n        row[0] = i;\n    }\n    // Initialize first row\n    for j in 0..=len2 {\n        matrix[0][j] = j;\n    }\n    \n    for (i, c1) in s1.chars().enumerate() {\n        for (j, c2) in s2.chars().enumerate() {\n            let cost = if c1 == c2 { 0 } else { 1 };\n            matrix[i + 1][j + 1] = std::cmp::min(\n                std::cmp::min(\n                    matrix[i][j + 1] + 1,      // deletion\n                    matrix[i + 1][j] + 1       // insertion\n                ),\n                matrix[i][j] + cost            // substitution\n            );\n        }\n    }\n    \n    matrix[len1][len2]\n}\n\nfn is_palindrome(input: String) -> bool {\n    let normalized: String = input\n        .chars()\n        .filter(|c| c.is_alphanumeric())\n        .flat_map(|c| c.to_lowercase())\n        .collect();\n    \n    let reversed: String = normalized.chars().rev().collect();\n    normalized == reversed\n}\n\nfn similarity(s1: String, s2: String) -> f64 {\n    let distance = levenshtein_distance(s1.clone(), s2.clone());\n    let max_len = std::cmp::max(s1.len(), s2.len());\n    \n    if max_len == 0 {\n        100.0\n    } else {\n        (1.0 - (distance as f64 / max_len as f64)) * 100.0\n    }\n}\n\n#[magnus::init]\nfn init(ruby: &Ruby) -> Result<(), Error> {\n    let module = ruby.define_module("FastStrings")?;\n    \n    // Define our module methods\n    module.define_singleton_method("reverse", function!(reverse_string, 1))?;\n    module.define_singleton_method("distance", function!(levenshtein_distance, 2))?;\n    module.define_singleton_method("palindrome?", function!(is_palindrome, 1))?;\n    module.define_singleton_method("similarity", function!(similarity, 2))?;\n    \n    Ok(())\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"add-the-unicode-dependency",children:"Add the Unicode dependency:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# ext/fast_strings/Cargo.toml\n[package]\nname = "fast_strings"\nversion = "0.1.0"\nedition = "2021"\n\n[dependencies]\nmagnus = { version = "0.7" }\nunicode-segmentation = "1.10"\n\n[lib]\nname = "fast_strings"\ncrate-type = ["cdylib"]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-build-your-extension-2-minutes",children:"Step 3: Build Your Extension (2 minutes)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install dependencies and compile\nbundle install\nbundle exec rake compile\n"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"\ud83d\udd0d What's happening during compilation?"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Ruby reads ",(0,i.jsx)(n.code,{children:"extconf.rb"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"create_rust_makefile"})," generates a Makefile"]}),"\n",(0,i.jsx)(n.li,{children:"Cargo compiles your Rust code"}),"\n",(0,i.jsxs)(n.li,{children:["The compiled library is copied to ",(0,i.jsx)(n.code,{children:"lib/fast_strings/"})]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Compiling unicode-segmentation v1.10.1\nCompiling magnus v0.6.2\nCompiling fast_strings v0.1.0\nFinished release [optimized] in 8.42s\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"step-4-add-tests--benchmarks-3-minutes",children:"Step 4: Add Tests & Benchmarks (3 minutes)"}),"\n",(0,i.jsx)(n.p,{children:"Create a test file to verify our implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# test/test_fast_strings.rb\nrequire "test_helper"\nrequire "benchmark"\n\nclass TestFastStrings < Minitest::Test\n  def test_reverse_simple\n    assert_equal "dlrow olleh", FastStrings.reverse("hello world")\n  end\n  \n  def test_reverse_unicode\n    # Test with emojis and complex Unicode\n    assert_equal "\ud83c\uddfa\ud83c\uddf8 ,\ud83c\uddeb\ud83c\uddf7 ,\ud83d\udc4b olleH", FastStrings.reverse("Hello \ud83d\udc4b, \ud83c\uddeb\ud83c\uddf7, \ud83c\uddfa\ud83c\uddf8")\n    assert_equal "\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66", FastStrings.reverse("\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66") # Family emoji\n  end\n  \n  def test_levenshtein_distance\n    assert_equal 0, FastStrings.distance("hello", "hello")\n    assert_equal 1, FastStrings.distance("hello", "hallo")\n    assert_equal 3, FastStrings.distance("saturday", "sunday")\n  end\n  \n  def test_performance\n    skip "Run with BENCH=1 to see benchmarks" unless ENV["BENCH"]\n    \n    text = "Hello \ud83d\udc4b World! " * 100\n    iterations = 10_000\n    \n    puts "\\n\\n=== Performance Comparison ==="\n    puts "String length: #{text.length} characters"\n    puts "Iterations: #{iterations.to_s.reverse.scan(/.{1,3}/).join(\',\').reverse}\\n\\n"\n    \n    ruby_time = Benchmark.realtime do\n      iterations.times { text.chars.reverse.join }\n    end\n    \n    rust_time = Benchmark.realtime do\n      iterations.times { FastStrings.reverse(text) }\n    end\n    \n    puts "Pure Ruby:  #{ruby_time.round(3)}s"\n    puts "With Rust:  #{rust_time.round(3)}s"\n    puts "Speedup:    #{(ruby_time / rust_time).round(1)}x faster! \ud83d\ude80\\n\\n"\n    \n    assert rust_time < ruby_time, "Rust should be faster than Ruby"\n  end\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-5-run-tests--see-results-3-minutes",children:"Step 5: Run Tests & See Results (3 minutes)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run the tests\nbundle exec rake test\n\n# Run with benchmarks\nBENCH=1 bundle exec rake test\n"})}),"\n",(0,i.jsx)("div",{className:"success-output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Run options: --seed 12345\n\n# Running:\n\n....\n\n=== Performance Comparison ===\nString length: 1500 characters\nIterations: 10,000\n\nPure Ruby:  2.847s\nWith Rust:  0.241s\nSpeedup:    11.8x faster! \ud83d\ude80\n\nFinished in 3.125s, 4 runs, 6 assertions\n\u2705 4 tests passed\n"})})}),"\n",(0,i.jsx)(n.h2,{id:"step-6-try-it-yourself-2-minutes",children:"Step 6: Try It Yourself! (2 minutes)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Open an interactive console\nbundle exec bin/console\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# Try the reverse function\nFastStrings.reverse("Hello, World!")\n# => "!dlroW ,olleH"\n\n# Works with emojis!\nFastStrings.reverse("Code \ud83d\udcbb with \u2764\ufe0f")\n# => "\u2764\ufe0f htiw \ud83d\udcbb edoC"\n\n# Try Levenshtein distance\nFastStrings.distance("kitten", "sitting")\n# => 3\n\n# Benchmark it yourself\nrequire "benchmark"\ntext = "Ruby " * 1000\n\nBenchmark.bm do |x|\n  x.report("Ruby:") { 1000.times { text.reverse } }\n  x.report("Rust:") { 1000.times { FastStrings.reverse(text) } }\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-bonus-add-more-features-optional",children:"\ud83c\udf86 Bonus: Add More Features (Optional)"}),"\n",(0,i.jsx)(n.p,{children:"Want to extend your gem? Here are some ideas:"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:"Add a method to check palindromes"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:'+ // In init():\n+ module.define_singleton_method("palindrome?", function!(is_palindrome, 1))?;\n'})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:"Add string similarity percentage"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:'+ // In init():\n+ module.define_singleton_method("similarity", function!(similarity, 2))?;\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"-publishing-your-gem",children:"\ud83d\udce6 Publishing Your Gem"}),"\n",(0,i.jsx)(n.p,{children:"Ready to share your creation with the world?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Update version in version.rb\n# Update gemspec with description and homepage\n\n# Build the gem\ngem build fast_strings.gemspec\n\n# Push to RubyGems.org\ngem push fast_strings-0.1.0.gem\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-what-you-learned",children:"\ud83c\udf93 What You Learned"}),"\n",(0,i.jsx)(n.p,{children:"In just 15 minutes, you:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 Created a Ruby gem with Rust extension",(0,i.jsx)(n.br,{}),"\n","\u2705 Wrote safe, fast Rust code",(0,i.jsx)(n.br,{}),"\n","\u2705 Handled Unicode correctly",(0,i.jsx)(n.br,{}),"\n","\u2705 Achieved 10x performance improvement",(0,i.jsx)(n.br,{}),"\n","\u2705 Added comprehensive tests"]}),"\n",(0,i.jsx)(n.h2,{id:"-challenge-yourself",children:"\ud83c\udfc1 Challenge Yourself"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Easy:"})," Add a method to count Unicode graphemes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Medium:"})," Implement a fast JSON parser"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hard:"})," Build a concurrent web scraper"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-continue-learning",children:"\ud83d\udcda Continue Learning"}),"\n",(0,i.jsxs)("div",{className:"next-steps-grid",children:[(0,i.jsxs)("div",{className:"next-step-card",children:[(0,i.jsx)(n.h3,{id:"-core-concepts",children:(0,i.jsx)(n.a,{href:"core-concepts",children:"\ud83e\udde0 Core Concepts"})}),(0,i.jsx)(n.p,{children:"Understand how rb-sys bridges Ruby and Rust"})]}),(0,i.jsxs)("div",{className:"next-step-card",children:[(0,i.jsx)(n.h3,{id:"-project-setup",children:(0,i.jsx)(n.a,{href:"project-setup",children:"\ud83d\udd28 Project Setup"})}),(0,i.jsx)(n.p,{children:"Structure larger projects properly"})]}),(0,i.jsxs)("div",{className:"next-step-card",children:[(0,i.jsx)(n.h3,{id:"-working-with-ruby-objects",children:(0,i.jsx)(n.a,{href:"working-with-ruby-objects",children:"\ud83d\udcdd Working with Ruby Objects"})}),(0,i.jsx)(n.p,{children:"Manipulate arrays, hashes, and more"})]}),(0,i.jsxs)("div",{className:"next-step-card",children:[(0,i.jsx)(n.h3,{id:"-performance-guide",children:"\u26a1 Performance Guide"}),(0,i.jsx)(n.p,{children:"Write even faster extensions"})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)("div",{className:"success-message",children:[(0,i.jsx)(n.h3,{id:"-congratulations",children:"\ud83c\udf89 Congratulations!"}),(0,i.jsx)(n.p,{children:"You've successfully built a Ruby extension with Rust that's production-ready and blazing fast!"}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Share your success:"})," Tweet with #RubyRust and tag @oxidize_rb"]})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);