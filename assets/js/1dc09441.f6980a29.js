"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[5927],{724:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"testing","title":"Testing","description":"Testing Ruby extensions written in Rust requires consideration of both the Ruby and Rust sides of your code. This chapter covers best practices and tools for comprehensive testing.","source":"@site/docs/testing.mdx","sourceDirName":".","slug":"/testing","permalink":"/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/testing.mdx","tags":[],"version":"current","lastUpdatedBy":"Ian Ker-Seymer","lastUpdatedAt":1752632597000,"sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"docsSidebar","previous":{"title":"Examples","permalink":"/docs/examples"},"next":{"title":"Debugging & Troubleshooting","permalink":"/docs/debugging"}}');var r=s(4848),i=s(8453),o=s(3779);const l={sidebar_position:9},a="Testing",c={},d=[{value:"Test Types",id:"test-types",level:2},{value:"Ruby Tests",id:"ruby-tests",level:2},{value:"Rust Tests",id:"rust-tests",level:2},{value:"Memory Testing",id:"memory-testing",level:2},{value:"Cross-Platform Testing",id:"cross-platform-testing",level:2},{value:"Integration Testing",id:"integration-testing",level:2},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Test Patterns",id:"common-test-patterns",level:2},{value:"1. Exception Testing",id:"1-exception-testing",level:3},{value:"2. Memory Stress Testing",id:"2-memory-stress-testing",level:3},{value:"3. Thread Safety Testing",id:"3-thread-safety-testing",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:2},{value:"Debugging Tests",id:"debugging-tests",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"testing",children:"Testing"})}),"\n","\n",(0,r.jsx)(n.p,{children:"Testing Ruby extensions written in Rust requires consideration of both the Ruby and Rust sides of your code. This chapter covers best practices and tools for comprehensive testing."}),"\n",(0,r.jsx)(o.A,{}),"\n",(0,r.jsx)(n.h2,{id:"test-types",children:"Test Types"}),"\n",(0,r.jsx)(n.p,{children:"A well-tested Ruby extension should include:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unit Tests"}),": Testing individual Rust functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Tests"}),": Testing the Ruby API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Tests"}),": Ensuring proper memory management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-Platform Tests"}),": Verifying behavior across platforms"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ruby-tests",children:"Ruby Tests"}),"\n",(0,r.jsx)(n.p,{children:"Ruby tests should verify the public API of your extension:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require "test_helper"\n\nclass MyExtensionTest < Test::Unit::TestCase\n  def setup\n    # Any setup code\n  end\n\n  def test_basic_functionality\n    result = MyExtension.process_data("input")\n    assert_equal "expected output", result\n  end\n\n  def test_error_handling\n    assert_raises(MyExtension::Error) do\n      MyExtension.process_data(nil)\n    end\n  end\n\n  def test_memory_management\n    GC.stress = true\n    100.times do\n      obj = MyExtension::Object.new\n      obj.perform_operation\n    end\n    GC.stress = false\n  end\n end\n'})}),"\n",(0,r.jsx)(n.h2,{id:"rust-tests",children:"Rust Tests"}),"\n",(0,r.jsx)(n.p,{children:"Rust tests in your extension should focus on the internal logic:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// Mock function for testing\nfn process_input(input: &str) -> Result<String, String> {\n    if input.is_empty() {\n        Err("Input cannot be empty".to_string())\n    } else {\n        Ok(format!("processed {}", input))\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_internal_processing() {\n        let input = "test data";\n        let result = process_input(input);\n        assert_eq!(result, Ok("processed test data".to_string()));\n    }\n\n    #[test]\n    fn test_error_conditions() {\n        let result = process_input("");\n        assert!(result.is_err());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"memory-testing",children:"Memory Testing"}),"\n",(0,r.jsx)(n.p,{children:"Test memory management using rb-sys's test helpers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use rb_sys_test_helpers::ruby_test;\nuse magnus::{Value, value::ReprValue};\n\n#[ruby_test]\nfn test_no_memory_leaks() {\n    let ruby = unsafe { magnus::Ruby::get_unchecked() };\n    \n    // Create and drop Ruby objects\n    let obj: Value = ruby.eval("Object.new")\n        .unwrap_or_else(|_| ruby.qnil().as_value());\n    let _ = obj; // Ensure the object is used\n\n    // Run GC and check memory usage\n    magnus::gc::start();\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"cross-platform-testing",children:"Cross-Platform Testing"}),"\n",(0,r.jsx)(n.p,{children:"Ensure your tests run on all target platforms:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# test/platform_specific_test.rb\nclass PlatformSpecificTest < Test::Unit::TestCase\n  def test_platform_specific_behavior\n    if RUBY_PLATFORM =~ /darwin/\n      # macOS specific tests\n      test_macos_behavior\n    elsif RUBY_PLATFORM =~ /linux/\n      # Linux specific tests\n      test_linux_behavior\n    elsif RUBY_PLATFORM =~ /mingw|mswin/\n      # Windows specific tests\n      test_windows_behavior\n    end\n  end\n\n  private\n\n  def test_macos_behavior\n    # macOS specific assertions\n  end\n\n  def test_linux_behavior\n    # Linux specific assertions\n  end\n\n  def test_windows_behavior\n    # Windows specific assertions\n  end\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,r.jsx)(n.p,{children:"Test the complete flow from Ruby to Rust and back:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class IntegrationTest < Test::Unit::TestCase\n  def test_complete_workflow\n    # Setup test data\n    input = prepare_test_data\n\n    # Process through Rust\n    result = MyExtension.process(input)\n\n    # Verify results\n    assert_valid_result(result)\n\n    # Cleanup\n    cleanup_test_data\n  end\n\n  private\n\n  def prepare_test_data\n    # Create necessary test fixtures\n  end\n\n  def assert_valid_result(result)\n    # Comprehensive result validation\n  end\n\n  def cleanup_test_data\n    # Clean up any resources\n  end\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,r.jsx)(n.p,{children:"Implement benchmarks to track performance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[cfg(test)]\nmod benchmarks {\n    use super::*;\n    use criterion::{criterion_group, criterion_main, Criterion};\n\n    fn benchmark_process(c: &mut Criterion) {\n        c.bench_function("process 1000 items", |b| {\n            b.iter(|| {\n                // Your benchmarked code here\n            })\n        });\n    }\n\n    criterion_group!(benches, benchmark_process);\n    criterion_main!(benches);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test Both Languages"}),": Write tests in both Ruby and Rust"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Verification"}),": Use ",(0,r.jsx)(n.code,{children:"GC.stress"})," in Ruby tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Cases"}),": Test error handling thoroughly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Platform Coverage"}),": Test on all target platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Tests"}),": Test complete workflows"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Metrics"}),": Include benchmarks"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-test-patterns",children:"Common Test Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-exception-testing",children:"1. Exception Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'def test_exception_handling\n  assert_raises(MyExtension::Error, "Should raise on invalid input") do\n    MyExtension.process(nil)\n  end\n\n  assert_raises(ArgumentError, "Should raise on wrong type") do\n    MyExtension.process(123) # Expecting string\n  end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-memory-stress-testing",children:"2. Memory Stress Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'def test_under_memory_pressure\n  GC.stress = true\n  begin\n    100.times do\n      obj = MyExtension::Object.new\n      obj.process_data("test")\n      obj = nil\n    end\n  ensure\n    GC.stress = false\n  end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-thread-safety-testing",children:"3. Thread Safety Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'def test_thread_safety\n  threads = 10.times.map do\n    Thread.new do\n      100.times do\n        result = MyExtension.process("test")\n        assert_equal "expected", result\n      end\n    end\n  end\n\n  threads.each(&:join)\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,r.jsx)(n.p,{children:"Configure CI to test across platforms:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        ruby: [2.7, 3.0, 3.1, 3.2]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n\n      - name: Install dependencies\n        run: bundle install\n\n      - name: Run tests\n        run: bundle exec rake test\n"})}),"\n",(0,r.jsx)(n.h2,{id:"debugging-tests",children:"Debugging Tests"}),"\n",(0,r.jsx)(n.p,{children:"Useful techniques for debugging test failures:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enable Verbose Output"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'ENV["RUST_BACKTRACE"] = "1"\nENV["RUST_LOG"] = "debug"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Debug Assertions"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn validate_input(value: i32) {\n    debug_assert!(value > 0, "Value must be positive, got {}", value);\n    debug_assert!(value < 100, "Value must be less than 100, got {}", value);\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Logging"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use log::{debug, info};\nuse magnus::Error;\n\nfn process_data(input: &str) -> Result<String, Error> {\n    debug!("Processing input: {}", input);\n    // Processing logic\n    let result = input.to_uppercase();\n    info!("Processing completed");\n    Ok(result)\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},3779:(e,n,s)=>{s.d(n,{A:()=>o});s(6540);const t={languageCallout:"languageCallout_VNpC",ruby:"ruby_iFYN",rust:"rust_PB7z",header:"header_itAP",icon:"icon_vHP_",title:"title_Bire",content:"content_ZrzH"};var r=s(4164),i=s(4848);function o({language:e,icon:n=!0,title:s,children:o}){const l=s||("ruby"===e?"Ruby":"Rust");return(0,i.jsxs)("div",{className:(0,r.A)(t.languageCallout,t[e]),children:[(0,i.jsxs)("div",{className:t.header,children:[n&&(0,i.jsx)("div",{className:t.icon,children:"ruby"===e?(0,i.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,i.jsx)("path",{d:"M6 3h12l4 6-10 12L2 9l4-6z",strokeLinejoin:"round"}),(0,i.jsx)("path",{d:"M12 21L2 9h20",strokeLinejoin:"round"})]}):(0,i.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,i.jsx)("circle",{cx:"12",cy:"12",r:"8"}),(0,i.jsx)("path",{d:"M12 4v2M12 18v2M4 12H6M18 12h2M6.34 6.34l1.42 1.42M16.24 16.24l1.42 1.42M6.34 17.66l1.42-1.42M16.24 7.76l1.42-1.42"}),(0,i.jsx)("path",{d:"M9 12a3 3 0 1 0 6 0 3 3 0 0 0-6 0z"})]})}),(0,i.jsx)("div",{className:t.title,children:l})]}),(0,i.jsx)("div",{className:t.content,children:o})]})}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);