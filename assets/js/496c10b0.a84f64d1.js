"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[1046],{1137:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"working-with-ruby-objects","title":"Working with Ruby Objects","description":"When writing Ruby extensions in Rust, one of the most common tasks is converting between Ruby and Rust types. The magnus crate provides a comprehensive set of conversion functions for this purpose.","source":"@site/docs/working-with-ruby-objects.mdx","sourceDirName":".","slug":"/working-with-ruby-objects","permalink":"/docs/working-with-ruby-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/working-with-ruby-objects.mdx","tags":[],"version":"current","lastUpdatedBy":"Fr\xe9d\xe9ric Fauberteau","lastUpdatedAt":1752872204000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"docsSidebar","previous":{"title":"Basic Patterns","permalink":"/docs/basic-patterns"},"next":{"title":"Ruby Classes and Modules","permalink":"/docs/classes-and-modules"}}');var s=r(4848),i=r(8453),a=r(3779);const o={sidebar_position:7},l="Working with Ruby Objects",u={},c=[{value:"Basic Type Conversions",id:"basic-type-conversions",level:2},{value:"Primitive Types",id:"primitive-types",level:3},{value:"Checking Types",id:"checking-types",level:3},{value:"Strings, Arrays, and Hashes",id:"strings-arrays-and-hashes",level:2},{value:"Working with Ruby Strings",id:"working-with-ruby-strings",level:3},{value:"Working with Ruby Arrays",id:"working-with-ruby-arrays",level:3},{value:"Working with Ruby Hashes",id:"working-with-ruby-hashes",level:3},{value:"Handling nil Values",id:"handling-nil-values",level:2},{value:"Converting Between Ruby and Rust Types",id:"converting-between-ruby-and-rust-types",level:2},{value:"From Rust to Ruby (TryConvert)",id:"from-rust-to-ruby-tryconvert",level:3},{value:"From Ruby to Rust (IntoValue)",id:"from-ruby-to-rust-intovalue",level:3},{value:"Best Practices",id:"best-practices",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"working-with-ruby-objects",children:"Working with Ruby Objects"})}),"\n","\n",(0,s.jsx)(n.p,{children:"When writing Ruby extensions in Rust, one of the most common tasks is converting between Ruby and Rust types. The magnus crate provides a comprehensive set of conversion functions for this purpose."}),"\n",(0,s.jsx)(a.A,{}),"\n",(0,s.jsx)(n.h2,{id:"basic-type-conversions",children:"Basic Type Conversions"}),"\n",(0,s.jsx)(n.h3,{id:"primitive-types",children:"Primitive Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{RString, Ruby, Integer, Float};\n\n#[magnus::init]\nfn init(ruby: &Ruby) -> Result<(), magnus::Error> {\n    // Convert Rust types to Ruby \n    let rb_string: RString = RString::new("Hello, Ruby!");        // Rust &str to Ruby String\n    let rb_int: Integer = Integer::from_i64(42);                 // Rust i64 to Ruby Integer\n    let rb_float: Float = Float::from_f64(std::f64::consts::PI); // Rust f64 to Ruby Float\n    let rb_bool = ruby.qtrue();  // Rust bool to Ruby true/false\n\n    // Convert Ruby types to Rust\n    let rust_string: String = rb_string.to_string()?;           // Ruby String to Rust String\n    let rust_int: i64 = rb_int.to_i64()?;                       // Ruby Integer to Rust i64 \n    let rust_float: f64 = rb_float.to_f64();                    // Ruby Float to Rust f64\n    // To check if a value is true/false, compare with qtrue/qfalse\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"checking-types",children:"Checking Types"}),"\n",(0,s.jsx)(n.p,{children:"When working with Ruby objects, you often need to check their types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{RString, Ruby, Value, Integer, TryConvert};\n\nfn process_value(ruby: &Ruby, val: Value) -> Result<(), magnus::Error> {\n    // Try converting to different types\n    if let Ok(s) = TryConvert::try_convert(val) {\n        let s: RString = s;\n        println!("Got string: {}", s.to_string()?);\n    } else if let Ok(i) = TryConvert::try_convert(val) {\n        let i: Integer = i;\n        println!("Got integer: {}", i.to_i64()?);\n    } else {\n        println!("Got some other type (could be nil or another type)");\n    }\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"strings-arrays-and-hashes",children:"Strings, Arrays, and Hashes"}),"\n",(0,s.jsx)(n.h3,{id:"working-with-ruby-strings",children:"Working with Ruby Strings"}),"\n",(0,s.jsx)(n.p,{children:"Ruby strings are encoded and have more complex behavior than Rust strings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{RString, Ruby, Value, value::ReprValue};\n\nfn string_operations(ruby: &Ruby) -> Result<(), magnus::Error> {\n    // Create a new Ruby string\n    let mut hello = RString::new("Hello");\n\n    // Concatenate strings (using funcall)\n    let world = RString::new(" World!");\n    hello.as_value().funcall::<_, _, Value>("concat", (world,))?;\n    let message = hello;\n\n    // Get bytes  \n    let bytes = unsafe { message.as_slice() };\n    println!("Bytes: {:?}", bytes);\n\n    // Create from bytes\n    let bytes = [72, 101, 108, 108, 111]; // "Hello" in ASCII\n    let new_str = RString::from_slice(&bytes);\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"working-with-ruby-arrays",children:"Working with Ruby Arrays"}),"\n",(0,s.jsx)(n.p,{children:"Ruby arrays can hold any kind of Ruby object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{RArray, Ruby, Value};\n\nfn array_operations(ruby: &Ruby) -> Result<(), magnus::Error> {\n    // Create a new empty array\n    let array = RArray::new();\n\n    // Push elements\n    array.push(1)?;\n    array.push("two")?;\n    array.push(3.0)?;\n\n    // Get length\n    let length = array.len();\n    println!("Array length: {}", length);\n\n    // Access elements\n    let first: i64 = array.entry(0)?;\n    let second: String = array.entry(1)?;\n    let third: f64 = array.entry(2)?;\n\n    // Iterate through elements\n    for i in 0..array.len() {\n        let item: Value = array.entry(i as isize)?;\n        println!("Item {}: {:?}", i, item);\n    }\n\n    // Another way to iterate\n    array.each().for_each(|val| {\n        println!("Item: {:?}", val);\n    });\n\n    // Create an array from Rust Vec\n    let numbers = vec![1, 2, 3, 4, 5];\n    let rb_array = RArray::from_iter(numbers);\n\n    // Convert to a Rust Vec\n    let vec: Vec<i64> = rb_array.to_vec()?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"working-with-ruby-hashes",children:"Working with Ruby Hashes"}),"\n",(0,s.jsx)(n.p,{children:"Ruby hashes are similar to Rust's HashMap but can use any Ruby object as keys:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{RHash, Value, Symbol, Ruby, r_hash::ForEach, TryConvert, Error};\n\nfn hash_operations(ruby: &Ruby) -> Result<(), magnus::Error> {\n    // Create a new hash\n    let hash = RHash::new();\n\n    // Add key-value pairs\n    hash.aset("name", "Alice")?;\n    hash.aset(Symbol::new("age"), 30)?;\n    hash.aset(1, "one")?;\n\n    // Get values\n    let name: String = TryConvert::try_convert(\n        hash.get("name")\n            .ok_or_else(|| Error::new(magnus::exception::key_error(), "name not found"))?\n    )?;\n    let age: i64 = TryConvert::try_convert(\n        hash.get(Symbol::new("age"))\n            .ok_or_else(|| Error::new(magnus::exception::key_error(), "age not found"))?\n    )?;\n    let one: String = TryConvert::try_convert(\n        hash.get(1)\n            .ok_or_else(|| Error::new(magnus::exception::key_error(), "1 not found"))?\n    )?;\n\n    // Check if key exists\n    if hash.get("name").is_some() {\n        println!("Has key \'name\'");\n    }\n\n    // Delete a key\n    let _deleted: Value = hash.delete(1)?;\n\n    // Iterate over key-value pairs\n    hash.foreach(|k: Value, v: Value| {\n        println!("Key: {:?}, Value: {:?}", k, v);\n        Ok(ForEach::Continue)\n    })?;\n\n    // Convert to a Rust HashMap (if keys and values are convertible)\n    // Convert to Rust HashMap by iterating\n    let mut map = std::collections::HashMap::new();\n    hash.foreach(|k: Value, v: Value| {\n        if let (Ok(key), Ok(value)) = (String::try_convert(k), String::try_convert(v)) {\n            map.insert(key, value);\n        }\n        Ok(ForEach::Continue)\n    })?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"handling-nil-values",children:"Handling nil Values"}),"\n",(0,s.jsxs)(n.p,{children:["Ruby's ",(0,s.jsx)(n.code,{children:"nil"})," is a special value that requires careful handling:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{Value, Ruby, RString, value::ReprValue, TryConvert};\n\nfn handle_nil(ruby: &Ruby, val: Value) -> Result<(), magnus::Error> {\n    // Try to convert value - returns None if nil or wrong type\n    let maybe_string: Option<RString> = TryConvert::try_convert(val).ok();\n    match maybe_string {\n        Some(s) => println!("Got string: {}", s.to_string()?),\n        None => println!("No string (was nil or couldn\'t convert)"),\n    }\n\n    // Return nil from a function\n    fn returns_nil(ruby: &Ruby) -> Value {\n        ruby.qnil().as_value()\n    }\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"converting-between-ruby-and-rust-types",children:"Converting Between Ruby and Rust Types"}),"\n",(0,s.jsx)(n.p,{children:"Magnus provides powerful type conversion traits that make it easy to convert between Ruby and Rust types."}),"\n",(0,s.jsx)(n.h3,{id:"from-rust-to-ruby-tryconvert",children:"From Rust to Ruby (TryConvert)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{Value, Ruby, TryConvert, Error, RHash};\n\n// Convert custom Rust types to Ruby objects\nstruct Person {\n    name: String,\n    age: u32,\n}\n\nimpl TryConvert for Person {\n    fn try_convert(val: Value) -> Result<Self, Error> {\n        let ruby = unsafe { Ruby::get_unchecked() };\n        let hash = RHash::try_convert(val)?;\n\n        let name: String = TryConvert::try_convert(hash.get("name").ok_or_else(|| Error::new(ruby.exception_key_error(), "name not found"))?)?;\n        let age: u32 = TryConvert::try_convert(hash.get("age").ok_or_else(|| Error::new(ruby.exception_key_error(), "age not found"))?)?;\n\n        Ok(Person { name, age })\n    }\n}\n\n// Usage\nfn process_person(val: Value) -> Result<(), Error> {\n    let person: Person = Person::try_convert(val)?;\n    println!("Person: {} ({})", person.name, person.age);\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"from-ruby-to-rust-intovalue",children:"From Ruby to Rust (IntoValue)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use magnus::{Value, Ruby, IntoValue, Error, RHash, value::ReprValue};\n\nstruct Point {\n    x: f64,\n    y: f64,\n}\n\nimpl IntoValue for Point {\n    fn into_value_with(self, ruby: &Ruby) -> Value {\n        let hash = RHash::new();\n        let _ = hash.aset("x", self.x);\n        let _ = hash.aset("y", self.y);\n        hash.as_value()\n    }\n}\n\n// Usage\nfn create_point(ruby: &Ruby) -> Result<Value, Error> {\n    let point = Point { x: 10.5, y: 20.7 };\n    Ok(point.into_value_with(ruby))\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Always Handle Errors"}),": Type conversions can fail, wrap them in proper error handling."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use try_convert"}),": Prefer ",(0,s.jsx)(n.code,{children:"try_convert"})," over direct conversions to safely handle type mismatches."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Remember Boxing Rules"}),": All Ruby objects are reference types, while many Rust types are value types."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Be Careful with Magic Methods"}),": Some Ruby methods like ",(0,s.jsx)(n.code,{children:"method_missing"})," might not behave as expected when called from Rust."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cache Ruby Objects"}),": If you're repeatedly using the same Ruby objects (like classes or symbols), consider caching them using ",(0,s.jsx)(n.code,{children:"Lazy"})," or similar mechanisms."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Check for nil"}),": Always check for nil values before attempting conversions that don't handle nil."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Type Annotations"}),": Explicitly specifying types when converting Ruby values to Rust can make your code clearer and avoid potential runtime errors."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pass Ruby State"}),": Always pass the ",(0,s.jsx)(n.code,{children:"Ruby"})," instance through your functions when needed rather than using ",(0,s.jsx)(n.code,{children:"Ruby::get()"})," repeatedly, as this is more performant and clearer about dependencies."]}),"\n"]}),"\n"]})]})}function y(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3779:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);const t={languageCallout:"languageCallout_VNpC",ruby:"ruby_iFYN",rust:"rust_PB7z",header:"header_itAP",icon:"icon_vHP_",title:"title_Bire",content:"content_ZrzH"};var s=r(4164),i=r(4848);function a({language:e,icon:n=!0,title:r,children:a}){const o=r||("ruby"===e?"Ruby":"Rust");return(0,i.jsxs)("div",{className:(0,s.A)(t.languageCallout,t[e]),children:[(0,i.jsxs)("div",{className:t.header,children:[n&&(0,i.jsx)("div",{className:t.icon,children:"ruby"===e?(0,i.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,i.jsx)("path",{d:"M6 3h12l4 6-10 12L2 9l4-6z",strokeLinejoin:"round"}),(0,i.jsx)("path",{d:"M12 21L2 9h20",strokeLinejoin:"round"})]}):(0,i.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,i.jsx)("circle",{cx:"12",cy:"12",r:"8"}),(0,i.jsx)("path",{d:"M12 4v2M12 18v2M4 12H6M18 12h2M6.34 6.34l1.42 1.42M16.24 16.24l1.42 1.42M6.34 17.66l1.42-1.42M16.24 7.76l1.42-1.42"}),(0,i.jsx)("path",{d:"M9 12a3 3 0 1 0 6 0 3 3 0 0 0-6 0z"})]})}),(0,i.jsx)("div",{className:t.title,children:o})]}),(0,i.jsx)("div",{className:t.content,children:a})]})}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);