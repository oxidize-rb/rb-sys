"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[118],{4152:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-reference/rb-sys-gem-config","title":"rb_sys Gem Configuration","description":"The rb_sys gem makes it easy to build native Ruby extensions in Rust. It interoperates with existing Ruby native","source":"@site/docs/api-reference/rb-sys-gem-config.mdx","sourceDirName":"api-reference","slug":"/api-reference/rb-sys-gem-config","permalink":"/docs/api-reference/rb-sys-gem-config","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/api-reference/rb-sys-gem-config.mdx","tags":[],"version":"current","lastUpdatedBy":"Ian Ker-Seymer","lastUpdatedAt":1752599549000,"frontMatter":{"id":"rb-sys-gem-config","title":"rb_sys Gem Configuration"},"sidebar":"docsSidebar","previous":{"title":"rb-sys Crate Features","permalink":"/docs/api-reference/rb-sys-features"},"next":{"title":"rb-sys-test-helpers","permalink":"/docs/api-reference/test-helpers"}}');var t=s(4848),r=s(8453);const a={id:"rb-sys-gem-config",title:"rb_sys Gem Configuration"},o="rb_sys Gem Configuration",l={},c=[{value:"RbSys::ExtensionTask",id:"rbsysextensiontask",level:2},{value:"create_rust_makefile",id:"create_rust_makefile",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Tips and Tricks",id:"tips-and-tricks",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Libclang Issues",id:"libclang-issues",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"rb_sys-gem-configuration",children:"rb_sys Gem Configuration"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"rb_sys"})," gem makes it easy to build native Ruby extensions in Rust. It interoperates with existing Ruby native\nextension toolchains (i.e., ",(0,t.jsx)(n.code,{children:"rake-compiler"}),") to make testing, building, and cross-compilation of gems easy."]}),"\n",(0,t.jsx)(n.h2,{id:"rbsysextensiontask",children:"RbSys::ExtensionTask"}),"\n",(0,t.jsxs)(n.p,{children:["This gem provides a ",(0,t.jsx)(n.code,{children:"RbSys::ExtensionTask"})," class that can be used to build a Ruby extension in Rust. It's a thin wrapper\naround ",(0,t.jsx)(n.code,{children:"Rake::ExtensionTask"})," that provides sane defaults for building Rust extensions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Rakefile\n\nrequire "rb_sys/extensiontask"\n\nGEMSPEC = Gem::Specification.load("my_gem.gemspec")\n\nRbSys::ExtensionTask.new("my-crate-name", GEMSPEC) do |ext|\n  ext.lib_dir = "lib/my_gem"\n\n  # If you want to use `rb-sys-dock` for cross-compilation:\n  ext.cross_compile = true\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"create_rust_makefile",children:"create_rust_makefile"}),"\n",(0,t.jsx)(n.p,{children:"The gem provides a simple helper to build a Ruby-compatible Makefile for your Rust extension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# ext/rust_reverse/extconf.rb\n\n# We need to require mkmf *first* since `rake-compiler` injects code here for cross compilation\nrequire "mkmf"\nrequire "rb_sys/mkmf"\n\ncreate_rust_makefile("rust_reverse") do |r|\n  # Create debug builds in dev. Make sure that release gems are compiled with\n  # `RB_SYS_CARGO_PROFILE=release` (optional)\n  r.profile = ENV.fetch("RB_SYS_CARGO_PROFILE", :dev).to_sym\n\n  # Can be overridden with `RB_SYS_CARGO_FEATURES` env var (optional)\n  r.features = ["test-feature"]\n\n  # You can add whatever env vars you want to the env hash (optional)\n  r.env = {"FOO" => "BAR"}\n\n  # If your Cargo.toml is in a different directory, you can specify it here (optional)\n  r.ext_dir = "."\n\n  # Extra flags to pass to the $RUSTFLAGS environment variable (optional)\n  r.extra_rustflags = ["--cfg=some_nested_config_var_for_crate"]\n\n  # Force a rust toolchain to be installed via rustup (optional)\n  # You can also set the env var `RB_SYS_FORCE_INSTALL_RUST_TOOLCHAIN=true`\n  r.force_install_rust_toolchain = "stable"\n\n  # Clean up the target/ dir after `gem install` to reduce bloat (optional)\n  r.clean_after_install = false # default: true if invoked by rubygems\n\n  # Auto-install Rust toolchain if not present on "gem install" (optional)\n  r.auto_install_rust_toolchain = false # default: true if invoked by rubygems\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"rb_sys"})," gem respects several environment variables that can modify its behavior:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Environment Variable"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RB_SYS_CARGO_PROFILE"})}),(0,t.jsxs)(n.td,{children:["Set the Cargo profile (i.e., ",(0,t.jsx)(n.code,{children:"release"})," or ",(0,t.jsx)(n.code,{children:"dev"}),")"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RB_SYS_CARGO_FEATURES"})}),(0,t.jsx)(n.td,{children:"Comma-separated list of Cargo features to enable"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RB_SYS_FORCE_INSTALL_RUST_TOOLCHAIN"})}),(0,t.jsx)(n.td,{children:"Force installation of a Rust toolchain"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RUBY_STATIC"})}),(0,t.jsxs)(n.td,{children:["Force static linking of libruby if set to ",(0,t.jsx)(n.code,{children:"true"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"LIBCLANG_PATH"})}),(0,t.jsx)(n.td,{children:"Path to libclang if it can't be found automatically"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"tips-and-tricks",children:"Tips and Tricks"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"rake-compiler"})," to build your gem, you can use the ",(0,t.jsx)(n.code,{children:"RB_SYS_CARGO_PROFILE"})," environment variable to set the\nCargo profile (i.e., ",(0,t.jsx)(n.code,{children:"release"})," or ",(0,t.jsx)(n.code,{children:"dev"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You can pass Cargo arguments to ",(0,t.jsx)(n.code,{children:"rake-compiler"})," like so: ",(0,t.jsx)(n.code,{children:"rake compile -- --verbose"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["It's possible to force an installation of a Rust toolchain by setting the ",(0,t.jsx)(n.code,{children:"RB_SYS_FORCE_INSTALL_RUST_TOOLCHAIN"}),"\nenvironment variable. This will install ",(0,t.jsx)(n.a,{href:"https://rustup.rs/",children:"rustup"})," and ",(0,t.jsx)(n.a,{href:"https://crates.io/",children:"cargo"})," in the build\ndirectory, so the end user does not have to have Rust pre-installed. Ideally, this should be a last resort, as it's\nbetter to already have the toolchain installed on your system."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"libclang-issues",children:"Libclang Issues"}),"\n",(0,t.jsx)(n.p,{children:"If you see an error like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"thread 'main' panicked at 'Unable to find libclang: \"couldn't find any valid shared libraries matching: ['libclang.so', 'libclang-*.so', 'libclang.so.*', 'libclang-*.so.*'], set the `LIBCLANG_PATH` environment variable to a path where one of these files can be found (invalid: [])\"'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that bindgen is having issues finding a usable version of libclang. An easy way to fix this is to install the\n",(0,t.jsxs)(n.a,{href:"https://github.com/oxidize-rb/libclang-rb",children:[(0,t.jsx)(n.code,{children:"libclang"})," gem"]}),", which will install a pre-built version of libclang for you.\n",(0,t.jsx)(n.code,{children:"rb_sys"})," will automatically detect this gem and use it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Gemfile\ngem "libclang", "~> 14.0.6"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);