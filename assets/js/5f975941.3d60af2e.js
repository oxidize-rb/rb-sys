"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[233],{933:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"api-reference/rb-sys-features","title":"rb-sys Crate Features","description":"The rb-sys crate provides battle-tested Rust bindings for the Ruby C API. It uses the","source":"@site/docs/api-reference/rb-sys-features.mdx","sourceDirName":"api-reference","slug":"/api-reference/rb-sys-features","permalink":"/docs/api-reference/rb-sys-features","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/api-reference/rb-sys-features.mdx","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1752872239000,"frontMatter":{"id":"rb-sys-features","title":"rb-sys Crate Features"},"sidebar":"docsSidebar","previous":{"title":"Cross-Platform Development","permalink":"/docs/cross-platform"},"next":{"title":"rb_sys Gem Configuration","permalink":"/docs/api-reference/rb-sys-gem-config"}}');var i=s(4848),t=s(8453);const d={id:"rb-sys-features",title:"rb-sys Crate Features"},a="rb-sys Crate Features",l={},o=[{value:"Usage Notice",id:"usage-notice",level:2},{value:"Writing a Ruby Gem",id:"writing-a-ruby-gem",level:2},{value:"Embedding libruby in Your Rust App",id:"embedding-libruby-in-your-rust-app",level:2},{value:"Static libruby",id:"static-libruby",level:2},{value:"Available Features",id:"available-features",level:2},{value:"Example Cargo.toml",id:"example-cargotoml",level:2},{value:"Ruby Version Compatibility",id:"ruby-version-compatibility",level:2},{value:"Integration with Magnus",id:"integration-with-magnus",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"rb-sys-crate-features",children:"rb-sys Crate Features"})}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"rb-sys"})," crate provides battle-tested Rust bindings for the Ruby C API. It uses the\n",(0,i.jsx)(r.a,{href:"https://github.com/rust-lang/rust-bindgen",children:(0,i.jsx)(r.code,{children:"rust-bindgen"})})," crate to generate bindings from the ",(0,i.jsx)(r.code,{children:"ruby.h"})," header."]}),"\n",(0,i.jsx)(r.h2,{id:"usage-notice",children:"Usage Notice"}),"\n",(0,i.jsxs)(r.p,{children:["This is a very low-level library. If you are looking to write a gem in Rust, you should probably use the\n",(0,i.jsx)(r.a,{href:"https://github.com/matsadler/magnus",children:"Magnus"})," crate with the ",(0,i.jsx)(r.code,{children:"rb-sys-interop"})," feature, which provides a higher-level,\nmore ergonomic API."]}),"\n",(0,i.jsx)(r.p,{children:"If you need raw/unsafe bindings to libruby, then this crate is for you!"}),"\n",(0,i.jsx)(r.h2,{id:"writing-a-ruby-gem",children:"Writing a Ruby Gem"}),"\n",(0,i.jsxs)(r.p,{children:["Ruby gems require boilerplate to be defined to be usable from Ruby. ",(0,i.jsx)(r.code,{children:"rb-sys"})," makes this process painless by doing the\nwork for you. Simply enable the ",(0,i.jsx)(r.code,{children:"gem"})," feature:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[dependencies]\nrb-sys = "0.9"\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Under the hood, this ensures the crate does not link libruby (unless on Windows) and defines a ",(0,i.jsx)(r.code,{children:"ruby_abi_version"}),"\nfunction for Ruby 3.2+."]}),"\n",(0,i.jsx)(r.h2,{id:"embedding-libruby-in-your-rust-app",children:"Embedding libruby in Your Rust App"}),"\n",(0,i.jsx)(r.admonition,{type:"important",children:(0,i.jsx)(r.p,{children:"If you are authoring a Ruby gem, you do not need to enable this feature."})}),"\n",(0,i.jsxs)(r.p,{children:["If you need to link libruby (i.e., you are initializing a Ruby VM in your Rust code), you can enable the ",(0,i.jsx)(r.code,{children:"link-ruby"}),"\nfeature:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[dependencies]\nrb-sys = { version = "0.9", features = ["link-ruby"] }\n'})}),"\n",(0,i.jsx)(r.h2,{id:"static-libruby",children:"Static libruby"}),"\n",(0,i.jsx)(r.p,{children:"You can also force static linking of libruby:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[dependencies]\nrb-sys = { version = "0.9", features = ["ruby-static"] }\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Alternatively, you can set the ",(0,i.jsx)(r.code,{children:"RUBY_STATIC=true"})," environment variable."]}),"\n",(0,i.jsx)(r.h2,{id:"available-features",children:"Available Features"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"rb-sys"})," crate provides several features that can be enabled in your ",(0,i.jsx)(r.code,{children:"Cargo.toml"}),":"]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Feature"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"global-allocator"})}),(0,i.jsxs)(r.td,{children:["Report Rust memory allocations to the Ruby GC (",(0,i.jsx)(r.em,{children:"recommended"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"ruby-static"})}),(0,i.jsx)(r.td,{children:"Link the static version of libruby"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"link-ruby"})}),(0,i.jsx)(r.td,{children:"Link libruby (typically used for embedding, not for extensions)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"bindgen-rbimpls"})}),(0,i.jsx)(r.td,{children:"Include the Ruby impl types in bindings"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"bindgen-deprecated-types"})}),(0,i.jsx)(r.td,{children:"Include deprecated Ruby methods in bindings"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"gem"})}),(0,i.jsx)(r.td,{children:"Set up the crate for use in a Ruby gem (default feature)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"stable-api"})}),(0,i.jsx)(r.td,{children:"Use the stable API (C level) if available for your Ruby version"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"example-cargotoml",children:"Example Cargo.toml"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[dependencies]\nrb-sys = { version = "0.9", features = ["global-allocator", "stable-api"] }\n'})}),"\n",(0,i.jsx)(r.h2,{id:"ruby-version-compatibility",children:"Ruby Version Compatibility"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"rb-sys"})," is compatible with Ruby 2.6 and later. The crate detects the Ruby version at compile time and adapts the\nbindings accordingly."]}),"\n",(0,i.jsxs)(r.p,{children:["For Ruby 3.2 and later, ",(0,i.jsx)(r.code,{children:"rb-sys"})," provides a ",(0,i.jsx)(r.code,{children:"ruby_abi_version"})," function that is required for native extensions."]}),"\n",(0,i.jsx)(r.h2,{id:"integration-with-magnus",children:"Integration with Magnus"}),"\n",(0,i.jsxs)(r.p,{children:["If you're building a Ruby extension, it's recommended to use the ",(0,i.jsx)(r.a,{href:"https://github.com/matsadler/magnus",children:"Magnus"})," crate on\ntop of ",(0,i.jsx)(r.code,{children:"rb-sys"}),". Magnus provides a high-level, safe API for interacting with Ruby:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-toml",children:'[dependencies]\nmagnus = { version = "0.7", features = ["rb-sys"] }\nrb-sys = "0.9"\n'})})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>a});var n=s(6540);const i={},t=n.createContext(i);function d(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);