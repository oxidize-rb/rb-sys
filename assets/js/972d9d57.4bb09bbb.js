"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[66],{1916:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"introduction","title":"Ruby & Rust","description":"Build fast, memory-safe Ruby extensions with Rust.","source":"@site/docs/introduction.mdx","sourceDirName":".","slug":"/","permalink":"/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/introduction.mdx","tags":[],"version":"current","lastUpdatedBy":"Fr\xe9d\xe9ric Fauberteau","lastUpdatedAt":1752872204000,"sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Ruby & Rust","slug":"/","sidebar_position":1,"keywords":["ruby","rust","extensions","native","performance","safety"],"description":"Build fast, memory-safe Ruby extensions with Rust."},"sidebar":"docsSidebar","next":{"title":"Getting Started","permalink":"/docs/getting-started"}}');var i=n(4848),t=n(8453);const l={id:"introduction",title:"Ruby & Rust",slug:"/",sidebar_position:1,keywords:["ruby","rust","extensions","native","performance","safety"],description:"Build fast, memory-safe Ruby extensions with Rust."},o="Ruby & Rust",d={},c=[{value:"See It In Action",id:"see-it-in-action",level:2},{value:"Why Choose Rust for Ruby Extensions?",id:"why-choose-rust-for-ruby-extensions",level:2},{value:"Memory Safety",id:"memory-safety",level:3},{value:"Production Success Stories",id:"production-success-stories",level:3},{value:"When to Use Rust",id:"when-to-use-rust",level:3},{value:"When to use Ruby",id:"when-to-use-ruby",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"The Stack",id:"the-stack",level:3},{value:"Quick Comparison",id:"quick-comparison",level:2},{value:"Platform Support",id:"platform-support",level:2},{value:"Supported Rubies",id:"supported-rubies",level:3},{value:"Supported Platforms",id:"supported-platforms",level:3},{value:"Join the Community",id:"join-the-community",level:2},{value:"Get Started",id:"get-started",level:2}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"ruby--rust",children:"Ruby & Rust"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Ship safer, faster Ruby code by writing performance-critical parts in Rust."})}),"\n",(0,i.jsx)(s.p,{children:"rb-sys makes building Ruby extensions in Rust easier than C, with memory safety guaranteed at compile time."}),"\n",(0,i.jsx)(s.h2,{id:"see-it-in-action",children:"See It In Action"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:'# Ruby code\nrequire "my_gem"\n\n# Call Rust from Ruby\nresult = MyGem.process_data(large_dataset)\n# => Processed 1M records in 0.2s\n'})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-rust",children:'// Rust code (using Magnus high-level API)\nuse magnus::{function, prelude::*, Error, Ruby};\n\n#[magnus::init]\nfn init(ruby: &Ruby) -> Result<(), Error> {\n    let module = ruby.define_module("MyGem")?;\n    module.define_singleton_method("process_data", function!(process_data, 1))?;\n    Ok(())\n}\n\nfn process_data(data: Vec<String>) -> Result<String, Error> {\n    // Your fast, safe Rust code here\n    Ok(format!("Processed {} records", data.len()))\n}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"why-choose-rust-for-ruby-extensions",children:"Why Choose Rust for Ruby Extensions?"}),"\n",(0,i.jsx)(s.h3,{id:"memory-safety",children:"Memory Safety"}),"\n",(0,i.jsx)(s.p,{children:"C extensions are notorious for segfaults and memory leaks. Rust eliminates entire categories of bugs:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"No segmentation faults"}),"\n",(0,i.jsx)(s.li,{children:"No memory leaks"}),"\n",(0,i.jsx)(s.li,{children:"No data races"}),"\n",(0,i.jsx)(s.li,{children:"No buffer overflows"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"production-success-stories",children:"Production Success Stories"}),"\n",(0,i.jsx)(s.p,{children:"These gems trust rb-sys in production:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"https://github.com/bytecodealliance/wasmtime-rb",children:"wasmtime-rb"})})," - WebAssembly runtime"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"https://github.com/Shopify/lz4-flex-rb",children:"lz4-flex-rb"})})," - LZ4 compression"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"https://github.com/Shopify/blake3-rb",children:"blake3-rb"})})," - BLAKE3 hashing"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"when-to-use-rust",children:"When to Use Rust"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CPU-intensive algorithms (parsing, compression, cryptography)"}),"\n",(0,i.jsx)(s.li,{children:"Memory-intensive operations (data processing, image manipulation)"}),"\n",(0,i.jsx)(s.li,{children:"System integration (FFI, hardware access, OS APIs)"}),"\n",(0,i.jsx)(s.li,{children:"Concurrent operations (parallel processing, async I/O)"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"when-to-use-ruby",children:"When to use Ruby"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Business logic and application flow"}),"\n",(0,i.jsx)(s.li,{children:"Simple CRUD operations"}),"\n",(0,i.jsx)(s.li,{children:"Glue code and integrations"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(s.mermaid,{value:"graph TD\n    A[Your Ruby Code] --\x3e B[Magnus API]\n    B --\x3e C[rb-sys Core]\n    C --\x3e D[Ruby VM]\n    \n    E[Rust Ecosystem<br/>crates.io] --\x3e B\n    \n    style A fill:#CC342D,color:#fff\n    style B fill:#CE422B,color:#fff\n    style C fill:#f9f9f9\n    style D fill:#CC342D,color:#fff\n    style E fill:#000,color:#fff"}),"\n",(0,i.jsx)(s.h3,{id:"the-stack",children:"The Stack"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Your Ruby code"})," calls methods like any other Ruby library"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Magnus"})," provides an ergonomic, safe Rust API for Ruby objects"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"rb-sys"})," handles the low-level Ruby C API bindings"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Rust ecosystem"})," - Use any crate from crates.io in your Ruby app!"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"quick-comparison",children:"Quick Comparison"}),"\n",(0,i.jsxs)("table",{className:"comparison-table",children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Feature"}),(0,i.jsx)("th",{children:"C Extensions"}),(0,i.jsx)("th",{children:"Rust + rb-sys"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Memory Safety"})}),(0,i.jsx)("td",{children:"Manual, error-prone"}),(0,i.jsx)("td",{children:"Guaranteed by compiler"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Segfaults"})}),(0,i.jsx)("td",{children:"Common in production"}),(0,i.jsx)("td",{children:"Impossible*"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Development Speed"})}),(0,i.jsx)("td",{children:"Slow"}),(0,i.jsx)("td",{children:"Fast"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Ecosystem"})}),(0,i.jsx)("td",{children:"C libraries only"}),(0,i.jsx)("td",{children:"130,000+ crates on crates.io"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Learning Curve"})}),(0,i.jsx)("td",{children:"High"}),(0,i.jsx)("td",{children:"Low"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"Cross-compilation"})}),(0,i.jsx)("td",{children:"Manual, platform-specific"}),(0,i.jsx)("td",{children:"Automated with Docker"})]})]})]}),"\n",(0,i.jsx)("small",{children:"* When using safe Rust. Unsafe blocks require careful review."}),"\n",(0,i.jsx)(s.h2,{id:"platform-support",children:"Platform Support"}),"\n",(0,i.jsx)(s.h3,{id:"supported-rubies",children:"Supported Rubies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Ruby 3.0+ (recommended)"}),"\n",(0,i.jsx)(s.li,{children:"Ruby 2.6+ (minimum)"}),"\n",(0,i.jsx)(s.li,{children:"TruffleRuby"}),"\n",(0,i.jsx)(s.li,{children:"JRuby (experimental)"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"supported-platforms",children:"Supported Platforms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Linux (x86_64, aarch64)"}),"\n",(0,i.jsx)(s.li,{children:"macOS (Intel & Apple Silicon)"}),"\n",(0,i.jsx)(s.li,{children:"Windows (MSVC)"}),"\n",(0,i.jsx)(s.li,{children:"Cross-compilation to all platforms"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"join-the-community",children:"Join the Community"}),"\n",(0,i.jsx)("div",{className:"community-links",children:(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"https://join.slack.com/t/oxidize-rb/shared_invite/zt-16zv5tqte-Vi7WfzxCesdo2TqF_RYBCw",children:"Slack"})})," - Get help and share experiences"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"https://github.com/oxidize-rb/rb-sys/issues",children:"GitHub Issues"})})," - Report bugs or request features"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"https://github.com/oxidize-rb/examples",children:"Examples"})})," - Learn from working code"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"https://www.youtube.com/watch?v=HT2JivOZ9zI",children:"YouTube"})})," - Watch talks and tutorials"]}),"\n"]})}),"\n",(0,i.jsx)(s.h2,{id:"get-started",children:"Get Started"}),"\n",(0,i.jsx)("div",{className:"cta-buttons",children:(0,i.jsxs)("div",{class:"cta-buttons",children:[(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.a,{href:"getting-started",children:[(0,i.jsx)(s.strong,{children:"Getting Started"})," \u2192"]})}),(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.a,{href:"quick-start",children:[(0,i.jsx)(s.strong,{children:"Quick Start Guide"})," \u2192"]})}),(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.a,{href:"examples",children:[(0,i.jsx)(s.strong,{children:"Explore Real Examples"})," \u2192"]})})]})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)("small",{children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"License:"})," Apache-2.0 OR MIT | ",(0,i.jsx)(s.strong,{children:"Minimum Ruby:"})," 2.6+ | ",(0,i.jsx)(s.strong,{children:"Minimum Rust:"})," 1.65+"]})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var r=n(6540);const i={},t=r.createContext(i);function l(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);