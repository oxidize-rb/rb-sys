"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[2753],{3779:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);const s={languageCallout:"languageCallout_VNpC",ruby:"ruby_iFYN",rust:"rust_PB7z",header:"header_itAP",icon:"icon_vHP_",title:"title_Bire",content:"content_ZrzH"};var i=t(4164),r=t(4848);function l({language:e,icon:n=!0,title:t,children:l}){const o=t||("ruby"===e?"Ruby":"Rust");return(0,r.jsxs)("div",{className:(0,i.A)(s.languageCallout,s[e]),children:[(0,r.jsxs)("div",{className:s.header,children:[n&&(0,r.jsx)("div",{className:s.icon,children:"ruby"===e?(0,r.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,r.jsx)("path",{d:"M6 3h12l4 6-10 12L2 9l4-6z",strokeLinejoin:"round"}),(0,r.jsx)("path",{d:"M12 21L2 9h20",strokeLinejoin:"round"})]}):(0,r.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,r.jsx)("circle",{cx:"12",cy:"12",r:"8"}),(0,r.jsx)("path",{d:"M12 4v2M12 18v2M4 12H6M18 12h2M6.34 6.34l1.42 1.42M16.24 16.24l1.42 1.42M6.34 17.66l1.42-1.42M16.24 7.76l1.42-1.42"}),(0,r.jsx)("path",{d:"M9 12a3 3 0 1 0 6 0 3 3 0 0 0-6 0z"})]})}),(0,r.jsx)("div",{className:s.title,children:o})]}),(0,r.jsx)("div",{className:s.content,children:l})]})}},5466:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"hello-rusty-documentation","title":"Hello Rusty Documentation","description":"The Rust code in this gem is a native extension for Ruby. It is compiled into a dynamic library that can be loaded by Ruby.","source":"@site/docs/hello-rusty-documentation.mdx","sourceDirName":".","slug":"/hello-rusty-documentation","permalink":"/docs/hello-rusty-documentation","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/hello-rusty-documentation.mdx","tags":[],"version":"current","lastUpdatedBy":"Ian Ker-Seymer","lastUpdatedAt":1754090914000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3}}');var i=t(4848),r=t(8453),l=t(3779);const o={sidebar_position:3},a="Hello Rusty Documentation",u={},c=[{value:"Implementation Details",id:"implementation-details",level:2},{value:"Ruby Extension Configuration",id:"ruby-extension-configuration",level:3},{value:"Rust Implementation",id:"rust-implementation",level:3},{value:"Ruby Integration",id:"ruby-integration",level:3},{value:"Trying It Out",id:"trying-it-out",level:2},{value:"Testing",id:"testing",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"hello-rusty-documentation",children:"Hello Rusty Documentation"})}),"\n","\n",(0,i.jsx)(l.A,{language:"rust",children:(0,i.jsx)(n.p,{children:"The Rust code in this gem is a native extension for Ruby. It is compiled into a dynamic library that can be loaded by Ruby."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\nThis section serves as companion documentation to the [Hello Rusty](https://github.com/oxidize-rb/rb-sys/tree/main/examples/hello_rusty) example project. It provides detailed explanations of the project's structure and implementation.\n\n<LanguageCallout />\n\n## Project Structure\n\nLet's examine the components that make up our Rusty Ruby Gem:\n\n```plaintext\nhello_rusty/\n\u251c\u2500\u2500 Cargo.toml             # Rust package manifest\n\u251c\u2500\u2500 Gemfile               # Ruby dependencies\n\u251c\u2500\u2500 LICENSE.txt           # Project license\n\u251c\u2500\u2500 README.md             # Project documentation\n\u251c\u2500\u2500 Rakefile              # Build automation\n\u251c\u2500\u2500 ext/                  # Native extension directory\n\u2502   \u2514\u2500\u2500 hello_rusty/      # Extension implementation\n\u2502       \u251c\u2500\u2500 Cargo.toml    # Rust crate configuration\n\u2502       \u251c\u2500\u2500 extconf.rb    # Ruby extension configuration\n\u2502       \u2514\u2500\u2500 src/          # Rust source code\n\u2502           \u2514\u2500\u2500 lib.rs    # Main implementation\n\u251c\u2500\u2500 hello_rusty.gemspec   # Gem specification\n\u251c\u2500\u2500 lib/                  # Ruby library code\n\u2502   \u251c\u2500\u2500 hello_rusty.rb    # Main Ruby module\n\u2502   \u2514\u2500\u2500 hello_rusty/      # Ruby implementation\n\u2502       \u2514\u2500\u2500 version.rb    # Version information\n\u2514\u2500\u2500 test/                 # Test files\n    \u251c\u2500\u2500 test_helper.rb    # Test configuration\n    \u2514\u2500\u2500 test_hello_rusty.rb # Test implementation\n"})}),"\n",(0,i.jsx)(n.p,{children:"This structure follows Ruby's standard gem layout with a few additions for the Rust implementation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ext/hello_rusty/"}),": Contains the Rust implementation of our native extension"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ext/hello_rusty/Cargo.toml"}),": Rust crate configuration and dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ext/hello_rusty/src/lib.rs"}),": Rust source code that implements our extension"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.h3,{id:"ruby-extension-configuration",children:"Ruby Extension Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"extconf.rb"})," file sets up our extension's build process:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'rb_sys/extensiontask'\n\nRbSys::ExtensionTask.new('hello_rusty') do |ext|\n  ext.lib_dir = File.expand_path('../lib/hello_rusty/', __dir__)\n  ext.cross_compile = true\n end\n"})}),"\n",(0,i.jsx)(n.p,{children:"This configuration:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Requires the ",(0,i.jsx)(n.code,{children:"rb_sys"})," gem"]}),"\n",(0,i.jsx)(n.li,{children:"Creates a new extension task named 'hello_rusty'"}),"\n",(0,i.jsx)(n.li,{children:"Sets the output directory for our compiled extension"}),"\n",(0,i.jsx)(n.li,{children:"Enables cross-compilation support"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rust-implementation",children:"Rust Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Let's examine our Rust implementation in ",(0,i.jsx)(n.code,{children:"ext/hello_rusty/src/lib.rs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use rb_sys::{ rb_define_module, rb_define_module_function };\n\n#[no_mangle]\npub extern "C" fn Init_hello_rusty() {\n    let module = unsafe { rb_define_module("HelloRusty") };\n    \n    unsafe {\n        rb_define_module_function(\n            module,\n            "greet",\n            Some(greet as unsafe extern "C" fn()),\n            0,\n        );\n    }\n}\n\nunsafe extern "C" fn greet() -> VALUE {\n    rb_str_new_cstr("Hello from Rust!")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This code:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Imports necessary functions from ",(0,i.jsx)(n.code,{children:"rb_sys"})]}),"\n",(0,i.jsxs)(n.li,{children:["Defines the initialization function (",(0,i.jsx)(n.code,{children:"Init_hello_rusty"}),")"]}),"\n",(0,i.jsx)(n.li,{children:'Creates a Ruby module named "HelloRusty"'}),"\n",(0,i.jsxs)(n.li,{children:["Defines a module function ",(0,i.jsx)(n.code,{children:"greet"})," that returns a string"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ruby-integration",children:"Ruby Integration"}),"\n",(0,i.jsxs)(n.p,{children:["Our Ruby code in ",(0,i.jsx)(n.code,{children:"lib/hello_rusty.rb"})," loads the extension:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require_relative "hello_rusty/version"\nrequire_relative "hello_rusty/hello_rusty"\n\nmodule HelloRusty\n  class Error < StandardError; end\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"This provides:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Version information"}),"\n",(0,i.jsx)(n.li,{children:"The native extension"}),"\n",(0,i.jsx)(n.li,{children:"A custom error class"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"trying-it-out",children:"Trying It Out"}),"\n",(0,i.jsx)(n.p,{children:"After installing the gem, you can use it like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'hello_rusty'\n\nputs HelloRusty.greet  # Output: \"Hello from Rust!\"\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsxs)(n.p,{children:["Our test file ",(0,i.jsx)(n.code,{children:"test/test_hello_rusty.rb"})," verifies the functionality:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require "test_helper"\n\nclass TestHelloRusty < Test::Unit::TestCase\n  def test_greet\n    assert_equal "Hello from Rust!", HelloRusty.greet\n  end\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"This ensures our Rust implementation correctly returns the expected greeting."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);