"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[7882],{1908:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"cross-platform","title":"Cross-Platform Development","description":"Overview","source":"@site/docs/cross-platform.mdx","sourceDirName":".","slug":"/cross-platform","permalink":"/docs/cross-platform","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/cross-platform.mdx","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1752872239000,"sidebarPosition":9,"frontMatter":{"id":"cross-platform","title":"Cross-Platform Development","sidebar_position":9},"sidebar":"docsSidebar","previous":{"title":"Troubleshooting","permalink":"/docs/troubleshooting"},"next":{"title":"rb-sys Crate Features","permalink":"/docs/api-reference/rb-sys-features"}}');var r=s(4848),l=s(8453),t=s(3779);const o={id:"cross-platform",title:"Cross-Platform Development",sidebar_position:9},a="Cross-Platform Development",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Supported Platforms",id:"supported-platforms",level:2},{value:"Platform Considerations",id:"platform-considerations",level:2},{value:"Understanding Platform Targets",id:"understanding-platform-targets",level:2},{value:"Conditional Compilation",id:"conditional-compilation",level:2},{value:"Complete Example: File Path Handling",id:"complete-example-file-path-handling",level:3},{value:"Platform-Specific Dependencies",id:"platform-specific-dependencies",level:2},{value:"Using build.rs for Platform Detection",id:"using-buildrs-for-platform-detection",level:2},{value:"Cross-Compilation with rb-sys-dock",id:"cross-compilation-with-rb-sys-dock",level:2},{value:"Setting Up rb-sys-dock in Your Gem",id:"setting-up-rb-sys-dock-in-your-gem",level:3},{value:"Building for a Specific Platform",id:"building-for-a-specific-platform",level:3},{value:"Building for All Platforms",id:"building-for-all-platforms",level:3},{value:"Using rb-sys-dock Directly",id:"using-rb-sys-dock-directly",level:3},{value:"Testing Cross-Platform Builds",id:"testing-cross-platform-builds",level:2},{value:"Local Testing with Docker",id:"local-testing-with-docker",level:3},{value:"Local Testing on macOS",id:"local-testing-on-macos",level:3},{value:"CI/CD for Multiple Platforms",id:"cicd-for-multiple-platforms",level:2},{value:"Testing on Multiple Platforms",id:"testing-on-multiple-platforms",level:3},{value:"Ruby-Head Compatibility",id:"ruby-head-compatibility",level:3},{value:"Cross-Compiling for Release",id:"cross-compiling-for-release",level:3},{value:"Complete CI Workflow Example",id:"complete-ci-workflow-example",level:3},{value:"Platform-Specific Issues and Solutions",id:"platform-specific-issues-and-solutions",level:2},{value:"Windows",id:"windows",level:3},{value:"macOS",id:"macos",level:3},{value:"Linux",id:"linux",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Good Platform Abstraction",id:"example-good-platform-abstraction",level:3},{value:"Complete Example: Cross-Platform Release Workflow",id:"complete-example-cross-platform-release-workflow",level:2},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"Example from wasmtime-rb",id:"example-from-wasmtime-rb",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cross-platform-development",children:"Cross-Platform Development"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"One of rb-sys's greatest strengths is its support for cross-platform Ruby extensions. This chapter covers how to\ndevelop, test, and distribute extensions across multiple platforms."}),"\n",(0,r.jsx)(n.h2,{id:"supported-platforms",children:"Supported Platforms"}),"\n",(0,r.jsx)(n.p,{children:"rb-sys supports cross-compilation to the following platforms:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Platform"}),(0,r.jsx)(n.th,{children:"Supported"}),(0,r.jsx)(n.th,{children:"Docker Image"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"x86_64-linux"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/x86_64-linux"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"x86_64-linux-musl"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/x86_64-linux-musl"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"aarch64-linux"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/aarch64-linux"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"aarch64-linux-musl"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/aarch64-linux-musl"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"arm-linux"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/arm-linux"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"arm64-darwin"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/arm64-darwin"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"x64-mingw32"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/x64-mingw32"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"x64-mingw-ucrt"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rbsys/x64-mingw-ucrt"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"mswin"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"not available on Docker"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"truffleruby"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"not available on Docker"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The Docker images are available on ",(0,r.jsx)(n.a,{href:"https://hub.docker.com/r/rbsys/rcd",children:"Docker Hub"})," and are automatically updated with\neach rb-sys release."]}),"\n",(0,r.jsx)(n.h2,{id:"platform-considerations",children:"Platform Considerations"}),"\n",(0,r.jsx)(n.p,{children:"Ruby extensions face several cross-platform challenges:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Different operating systems (Linux, macOS, Windows)"}),"\n",(0,r.jsx)(n.li,{children:"Different CPU architectures (x86_64, ARM64)"}),"\n",(0,r.jsx)(n.li,{children:"Different Ruby implementations"}),"\n",(0,r.jsx)(n.li,{children:"Different compilers and linkers"}),"\n",(0,r.jsx)(n.li,{children:"System libraries and dependencies"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"rb-sys provides tools to handle these differences effectively."}),"\n",(0,r.jsx)(n.h2,{id:"understanding-platform-targets",children:"Understanding Platform Targets"}),"\n",(0,r.jsx)(n.p,{children:"Ruby identifies platforms with standardized strings:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Platform String"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"x86_64-linux"})}),(0,r.jsx)(n.td,{children:"64-bit Linux on Intel/AMD"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"aarch64-linux"})}),(0,r.jsx)(n.td,{children:"64-bit Linux on ARM"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"x86_64-darwin"})}),(0,r.jsx)(n.td,{children:"64-bit macOS on Intel"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"arm64-darwin"})}),(0,r.jsx)(n.td,{children:"64-bit macOS on Apple Silicon"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"x64-mingw-ucrt"})}),(0,r.jsx)(n.td,{children:"64-bit Windows (UCRT)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"x64-mingw32"})}),(0,r.jsx)(n.td,{children:"64-bit Windows (older)"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"These platform strings are used by:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RubyGems to select the correct pre-built binary"}),"\n",(0,r.jsx)(n.li,{children:"rake-compiler for cross-compilation"}),"\n",(0,r.jsx)(n.li,{children:"rb-sys-dock to build for different platforms"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conditional-compilation",children:"Conditional Compilation"}),"\n",(0,r.jsx)(n.p,{children:"Rust's conditional compilation features allow you to write platform-specific code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// Platform-specific code\n#[cfg(target_os = "windows")]\nfn platform_specific() {\n    // Windows-specific implementation\n}\n\n#[cfg(target_os = "macos")]\nfn platform_specific() {\n    // macOS-specific implementation\n}\n\n#[cfg(target_os = "linux")]\nfn platform_specific() {\n    // Linux-specific implementation\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"For architectures:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[cfg(target_arch = "x86_64")]\nfn arch_specific() {\n    // x86_64 implementation\n}\n\n#[cfg(target_arch = "aarch64")]\nfn arch_specific() {\n    // ARM64 implementation\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"complete-example-file-path-handling",children:"Complete Example: File Path Handling"}),"\n",(0,r.jsx)(n.p,{children:"Here's a real-world example of handling paths differently across platforms:"}),"\n",(0,r.jsx)(t.A,{language:"rust",title:"Platform-Specific Path Handling",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use std::path::PathBuf;\n\nfn get_config_path() -> PathBuf {\n    #[cfg(target_os = "windows")]\n    {\n        let mut path = PathBuf::new();\n        if let Some(profile) = std::env::var_os("USERPROFILE") {\n            path.push(profile);\n            path.push("AppData");\n            path.push("Roaming");\n            path.push("MyApp");\n            path.push("config.toml");\n        }\n        path\n    }\n\n    #[cfg(target_os = "macos")]\n    {\n        let mut path = PathBuf::new();\n        if let Some(home) = std::env::var_os("HOME") {\n            path.push(home);\n            path.push("Library");\n            path.push("Application Support");\n            path.push("MyApp");\n            path.push("config.toml");\n        }\n        path\n    }\n\n    #[cfg(target_os = "linux")]\n    {\n        let mut path = PathBuf::new();\n        if let Some(config_dir) = std::env::var_os("XDG_CONFIG_HOME") {\n            path.push(config_dir);\n        } else if let Some(home) = std::env::var_os("HOME") {\n            path.push(home);\n            path.push(".config");\n        }\n        path.push("myapp");\n        path.push("config.toml");\n        path\n    }\n\n    #[cfg(not(any(target_os = "windows", target_os = "macos", target_os = "linux")))]\n    {\n        // Default for other platforms\n        PathBuf::from("config.toml")\n    }\n}\n'})})}),"\n",(0,r.jsx)(n.h2,{id:"platform-specific-dependencies",children:"Platform-Specific Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Cargo.toml supports platform-specific dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[dependencies]\n# Common dependencies...\n\n[target.\'cfg(target_os = "windows")\'.dependencies]\nwinapi = { version = "0.3", features = ["winbase"] }\n\n[target.\'cfg(target_os = "macos")\'.dependencies]\ncore-foundation = "0.9"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-buildrs-for-platform-detection",children:"Using build.rs for Platform Detection"}),"\n",(0,r.jsxs)(n.p,{children:["The Rust build script (",(0,r.jsx)(n.code,{children:"build.rs"}),") can be used to detect platforms and configure builds:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// ext/my_gem/build.rs\nfn main() {\n    // Detect OS\n    let target = std::env::var("TARGET").unwrap_or_default();\n\n    if target.contains("windows") {\n        println!("cargo:rustc-link-lib=dylib=user32");\n        println!("cargo:rustc-cfg=feature=\\"windows_specific\\"");\n    } else if target.contains("darwin") {\n        println!("cargo:rustc-link-lib=framework=CoreFoundation");\n        println!("cargo:rustc-cfg=feature=\\"macos_specific\\"");\n    } else if target.contains("linux") {\n        println!("cargo:rustc-link-lib=dylib=dl");\n        println!("cargo:rustc-cfg=feature=\\"linux_specific\\"");\n    }\n\n    // Tell Cargo to invalidate the built crate whenever the build script changes\n    println!("cargo:rerun-if-changed=build.rs");\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then in your code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// Note: These features would need to be defined in your Cargo.toml\n#[cfg(feature = "windows_specific")]\nfn platform_init() {\n    // Windows initialization code\n}\n\n#[cfg(feature = "macos_specific")]\nfn platform_init() {\n    // macOS initialization code\n}\n\n#[cfg(feature = "linux_specific")]\nfn platform_init() {\n    // Linux initialization code\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"cross-compilation-with-rb-sys-dock",children:"Cross-Compilation with rb-sys-dock"}),"\n",(0,r.jsx)(n.p,{children:"rb-sys-dock is a Docker-based tool that simplifies cross-compilation:"}),"\n",(0,r.jsx)(n.h3,{id:"setting-up-rb-sys-dock-in-your-gem",children:"Setting Up rb-sys-dock in Your Gem"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Add rb-sys-dock to your Gemfile:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# Gemfile\ngroup :development do\n  gem "rb-sys-dock", "~> 0.1"\nend\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Configure your Rakefile for cross-compilation:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# Rakefile\nrequire "rb_sys/extensiontask"\n\nGEMSPEC = Gem::Specification.load("my_gem.gemspec")\n\nRbSys::ExtensionTask.new("my_gem", GEMSPEC) do |ext|\n  ext.lib_dir = "lib/my_gem"\n  ext.cross_compile = true\n  ext.cross_platform = [\n    "x86_64-linux",\n    "aarch64-linux",\n    "x86_64-darwin",\n    "arm64-darwin",\n    "x64-mingw-ucrt"\n  ]\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"building-for-a-specific-platform",children:"Building for a Specific Platform"}),"\n",(0,r.jsx)(n.p,{children:"To build for a specific platform:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bundle exec rake native:my_gem:x86_64-linux\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This creates a platform-specific gem in the ",(0,r.jsx)(n.code,{children:"pkg"})," directory."]}),"\n",(0,r.jsx)(n.h3,{id:"building-for-all-platforms",children:"Building for All Platforms"}),"\n",(0,r.jsx)(n.p,{children:"To build for all configured platforms:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bundle exec rake native\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-rb-sys-dock-directly",children:"Using rb-sys-dock Directly"}),"\n",(0,r.jsx)(n.p,{children:"For more control, use rb-sys-dock directly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build for a specific platform\nbundle exec rb-sys-dock --platform x86_64-linux --build\n\n# Start a shell in the Docker container\nbundle exec rb-sys-dock --platform x86_64-linux --shell\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-cross-platform-builds",children:"Testing Cross-Platform Builds"}),"\n",(0,r.jsx)(n.h3,{id:"local-testing-with-docker",children:"Local Testing with Docker"}),"\n",(0,r.jsx)(n.p,{children:"You can test your cross-compiled Linux extensions locally:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run tests inside a Docker container\nbundle exec rb-sys-dock --platform x86_64-linux --command "bundle exec rake test"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"local-testing-on-macos",children:"Local Testing on macOS"}),"\n",(0,r.jsx)(n.p,{children:"If you're on macOS with Apple Silicon, you can test both architectures:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test arm64-darwin build (native)\nbundle exec rake test\n\n# Test x86_64-darwin build (cross-compiled)\narch -x86_64 bundle exec rake test\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cicd-for-multiple-platforms",children:"CI/CD for Multiple Platforms"}),"\n",(0,r.jsx)(n.p,{children:"GitHub Actions is ideal for testing across platforms:"}),"\n",(0,r.jsx)(n.h3,{id:"testing-on-multiple-platforms",children:"Testing on Multiple Platforms"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/test.yml\nname: Test\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        ruby: ["3.0", "3.1", "3.2", "3.3"]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: oxidize-rb/actions/setup-ruby-and-rust@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n      - run: bundle exec rake compile\n      - run: bundle exec rake test\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ruby-head-compatibility",children:"Ruby-Head Compatibility"}),"\n",(0,r.jsxs)(n.p,{children:["When supporting ",(0,r.jsx)(n.code,{children:"ruby-head"})," or development versions of Ruby, you must publish a source gem alongside your precompiled gems. This is necessary because:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The Ruby ABI (Application Binary Interface) can change between development versions"}),"\n",(0,r.jsx)(n.li,{children:"Precompiled binary gems built against one ruby-head version may be incompatible with newer ruby-head versions"}),"\n",(0,r.jsx)(n.li,{children:"Source gems allow users to compile the extension against their specific ruby-head version"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To ensure compatibility, add a source gem to your release process:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Rakefile\nRbSys::ExtensionTask.new(\"my_gem\", GEMSPEC) do |ext|\n  # Configure cross-platform gems as usual\n  ext.cross_compile = true\n  ext.cross_platform = ['x86_64-linux', 'arm64-darwin']\n\n  # The default platform will build the source gem\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then in your CI/CD pipeline, include both platform-specific and source gem builds:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/release.yml\njobs:\n  # First build all platform-specific gems\n  cross_compile:\n    # ...\n\n  # Then build the source gem\n  source_gem:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: "3.3"\n      - run: bundle install\n      - run: bundle exec rake build # Builds the source gem\n      - uses: actions/upload-artifact@v3\n        with:\n          name: source-gem\n          path: pkg/*.gem # Include source gem without platform suffix\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cross-compiling-for-release",children:"Cross-Compiling for Release"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/release.yml\nname: Release\n\non:\n  push:\n    tags: ["v*"]\n\njobs:\n  cross_compile:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: ["x86_64-linux", "aarch64-linux", "x86_64-darwin", "arm64-darwin", "x64-mingw-ucrt"]\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: "3.1"\n      - uses: oxidize-rb/actions/cross-gem@v1\n        with:\n          platform: ${{ matrix.platform }}\n      - uses: actions/upload-artifact@v3\n        with:\n          name: gem-${{ matrix.platform }}\n          path: pkg/*-${{ matrix.platform }}.gem\n'})}),"\n",(0,r.jsx)(n.h3,{id:"complete-ci-workflow-example",children:"Complete CI Workflow Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a more complete workflow showing an automated release process with tests and cross-compilation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/gem-release.yml\nname: Gem Release\n\non:\n  push:\n    tags:\n      - "v*"\n\njobs:\n  fetch-data:\n    runs-on: ubuntu-latest\n    outputs:\n      platforms: ${{ steps.fetch.outputs.supported-ruby-platforms }}\n    steps:\n      - id: fetch\n        uses: oxidize-rb/actions/fetch-ci-data@v1\n        with:\n          supported-ruby-platforms: |\n            exclude: [x86-linux, x86-darwin, arm-linux]\n\n  test:\n    needs: fetch-data\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        ruby: ["3.0", "3.1", "3.2", "3.3"]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: oxidize-rb/actions/setup-ruby-and-rust@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n      - run: bundle exec rake compile\n      - run: bundle exec rake test\n\n  cross-compile:\n    needs: [fetch-data, test]\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: ${{ fromJSON(needs.fetch-data.outputs.platforms) }}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: "3.1"\n      - uses: oxidize-rb/actions/cross-gem@v1\n        with:\n          platform: ${{ matrix.platform }}\n      - uses: actions/upload-artifact@v3\n        with:\n          name: gem-${{ matrix.platform }}\n          path: pkg/*-${{ matrix.platform }}.gem\n\n  release:\n    needs: cross-compile\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: "3.1"\n      - uses: actions/download-artifact@v3\n        with:\n          path: artifacts\n      - name: Move gems to pkg directory\n        run: |\n          mkdir -p pkg\n          find artifacts -name "*.gem" -exec mv {} pkg/ \\;\n      - name: Publish to RubyGems\n        run: |\n          mkdir -p ~/.gem\n          echo -e "---\\n:rubygems_api_key: ${RUBYGEMS_API_KEY}" > ~/.gem/credentials\n          chmod 0600 ~/.gem/credentials\n          gem push pkg/*.gem\n        env:\n          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"platform-specific-issues-and-solutions",children:"Platform-Specific Issues and Solutions"}),"\n",(0,r.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,r.jsx)(n.p,{children:"Windows presents unique challenges for Ruby extensions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Path Handling"}),": Use forward slashes (",(0,r.jsx)(n.code,{children:"/"}),") in paths, not backslashes (",(0,r.jsx)(n.code,{children:"\\"}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"DLL Loading"}),": Handle DLL loading carefully"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[cfg(target_os = "windows")]\nfn load_library(name: &str) -> Result<(), Error> {\n    use std::os::windows::ffi::OsStrExt;\n    use std::ffi::OsStr;\n    use winapi::um::libloaderapi::LoadLibraryW;\n\n    let name_wide: Vec<u16> = OsStr::new(name)\n        .encode_wide()\n        .chain(std::iter::once(0))\n        .collect();\n\n    let handle = unsafe { LoadLibraryW(name_wide.as_ptr()) };\n    if handle.is_null() {\n        return Err(Error::new("Failed to load library"));\n    }\n\n    Ok(())\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Asynchronous I/O"}),": Windows has different async I/O APIs"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'#[cfg(target_os = "windows")]\nuse windows_specific_io::read_file;\n\n#[cfg(not(target_os = "windows"))]\nuse posix_specific_io::read_file;\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"macos",children:"macOS"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Architectures"}),": Support both Intel and Apple Silicon"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# Rakefile\nRbSys::ExtensionTask.new("my_gem", GEMSPEC) do |ext|\n  ext.cross_platform = ["x86_64-darwin", "arm64-darwin"]\nend\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Framework Linking"}),": Link against macOS frameworks"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// build.rs\nfn main() {\n    #[cfg(target_os = "macos")]\n    {\n        println!("cargo:rustc-link-lib=framework=Security");\n        println!("cargo:rustc-link-lib=framework=CoreFoundation");\n    }\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Universal Binary"}),": Consider building universal binaries"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# extconf.rb\nif RUBY_PLATFORM =~ /darwin/\n  ENV['RUSTFLAGS'] = \"-C link-arg=-arch -C link-arg=arm64 -C link-arg=-arch -C link-arg=x86_64\"\nend\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"linux",children:"Linux"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"glibc vs musl"}),": Consider both glibc and musl for maximum compatibility"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# Rakefile\nRbSys::ExtensionTask.new("my_gem", GEMSPEC) do |ext|\n  ext.cross_platform = ["x86_64-linux", "x86_64-linux-musl"]\nend\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Static Linking"}),": Increase portability with static linking"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'# Cargo.toml\n[target.\'cfg(target_os = "linux")\'.dependencies]\nopenssl-sys = { version = "0.9", features = ["vendored"] }\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Multiple Distributions"}),": Test on different distributions in CI"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/linux-test.yml\njobs:\n  test:\n    strategy:\n      matrix:\n        container: ["ubuntu:20.04", "debian:bullseye", "alpine:3.15"]\n    container: ${{ matrix.container }}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Start with cross-compilation early"})," - Don't wait until release time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test on all target platforms"})," - Ideally in CI"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use platform-specific code sparingly"})," - Abstract platform differences when possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prefer conditional compilation over runtime checks"})," - Better performance and safer code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Document platform requirements"})," - Make dependencies clear to users"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use feature flags for optional platform support"})," - Allow users to opt-in to platform-specific features"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-good-platform-abstraction",children:"Example: Good Platform Abstraction"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use std::io;\n\n// Platform abstraction module\nmod platform {\n    use std::io;\n    \n    // Define platform-specific handle types\n    #[cfg(target_os = "windows")]\n    type PlatformSpecificHandle = std::os::windows::io::RawHandle;\n    \n    #[cfg(unix)]\n    type PlatformSpecificHandle = std::os::unix::io::RawFd;\n    \n    #[cfg(not(any(target_os = "windows", unix)))]\n    type PlatformSpecificHandle = ();\n    \n    pub struct FileHandle(PlatformSpecificHandle);\n\n    impl FileHandle {\n        pub fn open(path: &str) -> Result<Self, io::Error> {\n            #[cfg(target_os = "windows")]\n            {\n                // Windows-specific implementation\n                unimplemented!()\n            }\n\n            #[cfg(unix)]\n            {\n                // Unix-based implementation (Linux, macOS, etc.)\n                unimplemented!()\n            }\n\n            #[cfg(not(any(target_os = "windows", unix)))]\n            {\n                return Err(io::Error::new(io::ErrorKind::Other, "Unsupported platform"));\n            }\n        }\n\n        pub fn read(&self, buf: &mut [u8]) -> Result<usize, io::Error> {\n            // Platform-specific reading implementation\n            unimplemented!()\n        }\n\n        pub fn write(&self, buf: &[u8]) -> Result<usize, io::Error> {\n            // Platform-specific writing implementation\n            unimplemented!()\n        }\n    }\n}\n\n// User code just uses the abstraction\nuse platform::FileHandle;\n\nfn process_file(path: &str) -> Result<(), io::Error> {\n    let file = FileHandle::open(path)?;\n    // Common code without platform-specific details\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example-cross-platform-release-workflow",children:"Complete Example: Cross-Platform Release Workflow"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example for releasing a cross-platform gem:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Develop locally"})," on your preferred platform"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test your changes"})," locally with ",(0,r.jsx)(n.code,{children:"bundle exec rake test"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verify cross-platform builds"})," with\n",(0,r.jsx)(n.code,{children:'bundle exec rb-sys-dock --platform x86_64-linux --command "bundle exec rake test"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Commit and push"})," your changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI tests"})," run on all supported platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a release tag"})," when ready (",(0,r.jsx)(n.code,{children:"git tag v1.0.0 && git push --tags"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-compilation workflow"})," builds platform-specific gems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Publish gems"})," to RubyGems or your private repository"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By following this workflow, you can be confident your extension works consistently across platforms."}),"\n",(0,r.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,r.jsx)(n.p,{children:"Many real-world gems use rb-sys for cross-platform development:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/oxidize-rb/blake3-ruby",children:"blake3-ruby"})," - Fast cryptographic hash function implementation with full\ncross-platform support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/yoshoku/lz4-ruby",children:"lz4-ruby"})," - LZ4 compression library with rb-sys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/bytecodealliance/wasmtime-rb",children:"wasmtime-rb"})," - WebAssembly runtime"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These projects demonstrate successful cross-platform strategies and can serve as references for your own extensions."}),"\n",(0,r.jsx)(n.h3,{id:"example-from-wasmtime-rb",children:"Example from wasmtime-rb"}),"\n",(0,r.jsx)(n.p,{children:"wasmtime-rb wraps platform-specific functionality while presenting a consistent API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use std::io;\n\n#[cfg(unix)]\nmod unix {\n    use std::io;\n    \n    pub unsafe fn map_memory(addr: *mut u8, len: usize) -> Result<(), io::Error> {\n        // Unix-specific memory mapping\n        Ok(())\n    }\n}\n\n#[cfg(windows)]\nmod windows {\n    use std::io;\n    \n    pub unsafe fn map_memory(addr: *mut u8, len: usize) -> Result<(), io::Error> {\n        // Windows-specific memory mapping\n        Ok(())\n    }\n}\n\n// Public API uses the platform-specific implementation\npub unsafe fn map_memory(addr: *mut u8, len: usize) -> Result<(), io::Error> {\n    #[cfg(unix)]\n    {\n        return unix::map_memory(addr, len);\n    }\n\n    #[cfg(windows)]\n    {\n        return windows::map_memory(addr, len);\n    }\n\n    #[cfg(not(any(unix, windows)))]\n    {\n        return Err(io::Error::new(io::ErrorKind::Other, "Unsupported platform"));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Cross-platform development with rb-sys leverages Rust's excellent platform-specific features:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Conditional compilation"})," provides platform-specific code paths"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Platform-specific dependencies"})," allow different libraries per platform"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"rb-sys-dock"})," enables easy cross-compilation for multiple platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GitHub Actions integration"})," automates testing and releases"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By following the patterns in this chapter, your Ruby extensions can work seamlessly across all major platforms while\nminimizing platform-specific code and maintenance burden."}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Visit ",(0,r.jsx)(n.a,{href:"build-process",children:"Build Process"})," to see local compilation details."]}),"\n",(0,r.jsxs)(n.li,{children:["Check out ",(0,r.jsx)(n.a,{href:"testing",children:"Testing Extensions"})," for CI workflows across platforms."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.a,{href:"debugging",children:"Debugging"})," techniques when cross-compiling fails."]}),"\n",(0,r.jsxs)(n.li,{children:["Review ",(0,r.jsx)(n.a,{href:"project-setup",children:"Project Setup"})," to organize multi-platform gems."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},3779:(e,n,s)=>{s.d(n,{A:()=>t});s(6540);const i={languageCallout:"languageCallout_VNpC",ruby:"ruby_iFYN",rust:"rust_PB7z",header:"header_itAP",icon:"icon_vHP_",title:"title_Bire",content:"content_ZrzH"};var r=s(4164),l=s(4848);function t({language:e,icon:n=!0,title:s,children:t}){const o=s||("ruby"===e?"Ruby":"Rust");return(0,l.jsxs)("div",{className:(0,r.A)(i.languageCallout,i[e]),children:[(0,l.jsxs)("div",{className:i.header,children:[n&&(0,l.jsx)("div",{className:i.icon,children:"ruby"===e?(0,l.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,l.jsx)("path",{d:"M6 3h12l4 6-10 12L2 9l4-6z",strokeLinejoin:"round"}),(0,l.jsx)("path",{d:"M12 21L2 9h20",strokeLinejoin:"round"})]}):(0,l.jsxs)("svg",{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",height:"20",width:"20",children:[(0,l.jsx)("circle",{cx:"12",cy:"12",r:"8"}),(0,l.jsx)("path",{d:"M12 4v2M12 18v2M4 12H6M18 12h2M6.34 6.34l1.42 1.42M16.24 16.24l1.42 1.42M6.34 17.66l1.42-1.42M16.24 7.76l1.42-1.42"}),(0,l.jsx)("path",{d:"M9 12a3 3 0 1 0 6 0 3 3 0 0 0-6 0z"})]})}),(0,l.jsx)("div",{className:i.title,children:o})]}),(0,l.jsx)("div",{className:i.content,children:t})]})}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);