---
name: Build and push docker images

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "*docker*"
    tags:
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  fetch_ci_data:
    name: üì• Fetch CI data
    runs-on: ubuntu-latest
    outputs:
      toolchains-data: ${{ steps.data.outputs.toolchains-data }}
    steps:
      - id: data
        run: |
          curl -s https://raw.githubusercontent.com/oxidize-rb/rb-sys/$GITHUB_SHA/data/toolchains.json > toolchains.json
          echo "toolchains-data=$(jq -c '.toolchains | [.[] | select(.supported == true)]' toolchains.json)" >> $GITHUB_OUTPUT
  docker_images:
    needs: fetch_ci_data
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: ${{ fromJSON(needs.fetch_ci_data.outputs.toolchains-data) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set rb-sys version variable
        id: vars
        run: |
          version="$(ruby -r $PWD/gem/lib/rb_sys/version.rb -e 'puts RbSys::VERSION')"
          echo "rb-sys-version=$version" >> $GITHUB_OUTPUT

      - name: Set platform and aliases
        id: setup_platform
        run: |
          ruby_platform=$(echo '${{ matrix.toolchain.ruby-platform }}')
          aliases=$(echo '${{ toJSON(matrix.toolchain.aliases) }}' | jq -r 'if . == null then "" else join(" ") end')
          echo "ruby_platform=$ruby_platform" >> $GITHUB_ENV
          echo "aliases=$aliases" >> $GITHUB_ENV

      # Test the container
      - uses: actions/checkout@v4
        with:
          repository: "oxidize-rb/oxi-test"
          path: "tmp/oxi-test"

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker images list
        id: prepare_images
        run: |
          images="${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ruby_platform }}"

          for alias in ${{ env.aliases }}; do
            images+=",${{ secrets.DOCKER_HUB_USERNAME }}/$alias"
          done

          printf "images=%s\n" "$images" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.images }}
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
          labels:
            org.opencontainers.image.description=Image for building native Rust extensions for Ruby on ${{ env.ruby_platform }}
            org.opencontainers.image.vendor=oxidize-rb
            org.oxidize-rb.ruby.platform=${{ env.ruby_platform }}

      - name: Docker build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./docker
          file: ./docker/Dockerfile.${{ env.ruby_platform }}
          platforms: linux/amd64
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ruby_platform }}:cache-${{ steps.vars.outputs.rb-sys-version }}
          cache-to: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ruby_platform }}:cache-${{ steps.vars.outputs.rb-sys-version }}

      - name: Run tests
        shell: bash
        run: |
          echo "::group::Install deps"
          rb_sys_dock_cache_dir="$HOME/.cache/rb-sys-dock"
          sudo chmod 777 tmp/oxi-test
          cd tmp/oxi-test
          ruby -e "File.write('Gemfile', File.read('Gemfile').gsub(/gem .rb_sys.*$/, 'gem \"rb_sys\", git: \"https://github.com/oxidize-rb/rb-sys\", ref: \"$GITHUB_SHA\"'))"

          mkdir .cargo
          echo "[patch.crates-io]"      >> .cargo/config.toml
          for package in rb-sys rb-sys-build rb-sys-env; do
            echo "$package = { git = 'https://github.com/oxidize-rb/rb-sys', rev = '$GITHUB_SHA' }" >> .cargo/config.toml
            cargo update -p "$package"
          done

          mkdir -p "$rb_sys_dock_cache_dir"
          export RB_SYS_DOCK_UID="$(id -u)"
          export RB_SYS_DOCK_GID="$(id -g)"
          export RB_SYS_DOCK_CACHE_DIR="$rb_sys_dock_cache_dir"
          bundle install --jobs 4 --retry 3
          echo "::endgroup::"

          echo "::group::Cross build oxi-test gem (sha-$GITHUB_SHA)"
          bundle exec rb-sys-dock --platform ${{ env.ruby_platform }} --build --tag "sha-$GITHUB_SHA" --verbose
          echo "::endgroup::"

          if [ -f pkg/oxi-test-0.1.0-${{ env.ruby_platform }}.gem ]; then
            echo "::group::Unpack oxi-test gem for testing"
            gem unpack pkg/oxi-test-0.1.0-${{ env.ruby_platform }}.gem --target=tmp
            tree tmp/oxi-test-0.1.0-${{ env.ruby_platform }}
            echo "::endgroup::"
            echo "‚úÖ oxi-test gem built successfully"
          else
            echo "::group::Debug directory"
            tree .
            echo "::endgroup::"
            echo "‚ùå oxi-test gem build failed"
            exit 1
          fi

      - name: Analyze image bloat
        run: |
          image="${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ruby_platform }}:sha-$GITHUB_SHA"
          lowest_efficiency="0.95"
          highest_user_wasted_percent="0.05"

          case "${{ env.ruby_platform }}" in
            x86_64-linux)
              lowest_efficiency="0.82"
              highest_user_wasted_percent="0.27"
              ;;
          esac

          echo "Running dive on $image with max wasted percent of $lowest_efficiency"

          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive "$image" \
            --ci \
            --lowestEfficiency "$lowest_efficiency" \
            --highestUserWastedPercent "$highest_user_wasted_percent"

      - name: Docker push
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./docker
          file: ./docker/Dockerfile.${{ env.ruby_platform }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ruby_platform }}:cache-${{ steps.vars.outputs.rb-sys-version }}
          cache-to: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ruby_platform }}:cache-${{ steps.vars.outputs.rb-sys-version }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          repository: rbsys/${{ env.ruby_platform }}
          readme-filepath: ./readme.md

      - name: Slack Noti on Failure
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()
