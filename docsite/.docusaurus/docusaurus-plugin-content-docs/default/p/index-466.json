{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/","docId":"introduction","unlisted":false},{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Prerequisites and Installation","href":"/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Quick Start - Your First Extension","href":"/quick-start","docId":"quick-start","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Project Setup","href":"/project-setup","docId":"project-setup","unlisted":false},{"type":"link","label":"Hello Rusty Documentation","href":"/hello-rusty-documentation","docId":"hello-rusty-documentation","unlisted":false},{"type":"link","label":"Development Approaches","href":"/development-approaches","docId":"development-approaches","unlisted":false},{"type":"link","label":"Working with Ruby Objects","href":"/working-with-ruby-objects","docId":"working-with-ruby-objects","unlisted":false},{"type":"link","label":"Ruby Classes and Modules","href":"/classes-and-modules","docId":"classes-and-modules","unlisted":false},{"type":"link","label":"Error Handling in Rust Ruby Extensions","href":"/error-handling","docId":"error-handling","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Topics","items":[{"type":"link","label":"Memory Management & Safety","href":"/memory-management","docId":"memory-management","unlisted":false},{"type":"link","label":"The Build Process","href":"/build-process","docId":"build-process","unlisted":false},{"type":"link","label":"Cross-Platform Development","href":"/cross-platform","docId":"cross-platform","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Practical Development","items":[{"type":"link","label":"Testing","href":"/testing","docId":"testing","unlisted":false},{"type":"link","label":"Debugging & Troubleshooting","href":"/debugging","docId":"debugging","unlisted":false},{"type":"link","label":"Troubleshooting","href":"/troubleshooting","docId":"troubleshooting","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"link","label":"rb-sys Crate Features","href":"/api-reference/rb-sys-features","docId":"api-reference/rb-sys-features","unlisted":false},{"type":"link","label":"rb_sys Gem Configuration","href":"/api-reference/rb-sys-gem-config","docId":"api-reference/rb-sys-gem-config","unlisted":false},{"type":"link","label":"rb-sys-test-helpers","href":"/api-reference/test-helpers","docId":"api-reference/test-helpers","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Community and Support","href":"/community-support","docId":"community-support","unlisted":false}]},"docs":{"api-reference/rb-sys-features":{"id":"api-reference/rb-sys-features","title":"rb-sys Crate Features","description":"The rb-sys crate provides battle-tested Rust bindings for the Ruby C API. It uses the","sidebar":"docsSidebar"},"api-reference/rb-sys-gem-config":{"id":"api-reference/rb-sys-gem-config","title":"rb_sys Gem Configuration","description":"The rb_sys gem makes it easy to build native Ruby extensions in Rust. It interoperates with existing Ruby native","sidebar":"docsSidebar"},"api-reference/test-helpers":{"id":"api-reference/test-helpers","title":"rb-sys-test-helpers","description":"The rb-sys-test-helpers crate provides utilities for testing Ruby extensions from Rust. It makes it easy to run tests","sidebar":"docsSidebar"},"build-process":{"id":"build-process","title":"The Build Process","description":"Overview","sidebar":"docsSidebar"},"classes-and-modules":{"id":"classes-and-modules","title":"Ruby Classes and Modules","description":"This chapter covers how to define and work with Ruby classes and modules from Rust. It explains different approaches for","sidebar":"docsSidebar"},"community-support":{"id":"community-support","title":"Community and Support","description":"The rb-sys project is maintained by the Oxidize Ruby community, a group of developers passionate about integrating Rust","sidebar":"docsSidebar"},"cross-platform":{"id":"cross-platform","title":"Cross-Platform Development","description":"Overview","sidebar":"docsSidebar"},"debugging":{"id":"debugging","title":"Debugging & Troubleshooting","description":"This chapter covers techniques for debugging Rust-based Ruby extensions, common error patterns, and approaches to","sidebar":"docsSidebar"},"development-approaches":{"id":"development-approaches","title":"Development Approaches","description":"When building Ruby extensions with Rust and rb-sys, you have two main approaches to choose from:","sidebar":"docsSidebar"},"error-handling":{"id":"error-handling","title":"Error Handling in Rust Ruby Extensions","description":"Proper error handling is critical for robust Ruby extensions. This guide covers how to handle errors in Rust and map","sidebar":"docsSidebar"},"examples":{"id":"examples","title":"Examples","description":"This page demonstrates the custom components created for the Ruby on Rust documentation."},"getting-started":{"id":"getting-started","title":"Prerequisites and Installation","description":"This chapter provides a streamlined setup guide for building Ruby extensions with Rust.","sidebar":"docsSidebar"},"hello-rusty-documentation":{"id":"hello-rusty-documentation","title":"Hello Rusty Documentation","description":"This section serves as companion documentation to the Hello Rusty example project. It provides detailed explanations of the project's structure and implementation.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let's discover Docusaurus in less than 5 minutes."},"introduction":{"id":"introduction","title":"Introduction","description":"Welcome to the rb-sys guide. This book will show you how to build Ruby extensions in Rust that are both powerful and","sidebar":"docsSidebar"},"memory-management":{"id":"memory-management","title":"Memory Management & Safety","description":"One of the most important aspects of writing Ruby extensions is proper memory management. This chapter covers how Ruby's","sidebar":"docsSidebar"},"project-setup":{"id":"project-setup","title":"Project Setup","description":"In this chapter, we'll explore how to set up and organize a Ruby gem with a Rust extension. We'll focus on practical patterns and highlight how to leverage valuable Rust libraries without introducing unnecessary complexity.","sidebar":"docsSidebar"},"quick-start":{"id":"quick-start","title":"Quick Start - Your First Extension","description":"This chapter shows you how to create a Ruby gem with a Rust extension using Bundler's built-in Rust support.","sidebar":"docsSidebar"},"testing":{"id":"testing","title":"Testing","description":"Testing Ruby extensions written in Rust requires consideration of both the Ruby and Rust sides of your code. This chapter covers best practices and tools for comprehensive testing.","sidebar":"docsSidebar"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"This guide helps you diagnose and fix common issues when developing Ruby extensions with rb-sys.","sidebar":"docsSidebar"},"working-with-ruby-objects":{"id":"working-with-ruby-objects","title":"Working with Ruby Objects","description":"When writing Ruby extensions in Rust, one of the most common tasks is converting between Ruby and Rust types. The magnus crate provides a comprehensive set of conversion functions for this purpose.","sidebar":"docsSidebar"}}}}