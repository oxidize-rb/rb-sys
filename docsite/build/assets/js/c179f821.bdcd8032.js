"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[110],{3215:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"quick-start","title":"Quick Start - Your First Extension","description":"This chapter shows you how to create a Ruby gem with a Rust extension using Bundler\'s built-in Rust support.","source":"@site/docs/quick-start.mdx","sourceDirName":".","slug":"/quick-start","permalink":"/docs/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/oxidize-rb/rb-sys/tree/main/docsite/docs/quick-start.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"quick-start","title":"Quick Start - Your First Extension","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Prerequisites and Installation","permalink":"/docs/getting-started"},"next":{"title":"Project Setup","permalink":"/docs/project-setup"}}');var s=t(4848),r=t(8453);const l={id:"quick-start",title:"Quick Start - Your First Extension",sidebar_position:3},o="Quick Start: Your First Extension",a={},d=[{value:"Creating a Gem with Bundler",id:"creating-a-gem-with-bundler",level:2},{value:"Understanding the Generated Files",id:"understanding-the-generated-files",level:2},{value:"The Rust Code (lib.rs)",id:"the-rust-code-librs",level:3},{value:"The Extension Configuration (extconf.rb)",id:"the-extension-configuration-extconfrb",level:3},{value:"Enhancing the Default Implementation",id:"enhancing-the-default-implementation",level:2},{value:"Building and Testing",id:"building-and-testing",level:2},{value:"Compile the Extension",id:"compile-the-extension",level:3},{value:"Run the Tests",id:"run-the-tests",level:3},{value:"Try It in the Console",id:"try-it-in-the-console",level:3},{value:"Customizing the Build",id:"customizing-the-build",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-start-your-first-extension",children:"Quick Start: Your First Extension"})}),"\n",(0,s.jsx)(n.p,{children:"This chapter shows you how to create a Ruby gem with a Rust extension using Bundler's built-in Rust support."}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-gem-with-bundler",children:"Creating a Gem with Bundler"}),"\n",(0,s.jsx)(n.p,{children:"The easiest way to create a new gem with a Rust extension is with Bundler:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create a new gem with a Rust extension\nbundle gem --ext=rust hello_rusty\ncd hello_rusty\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command generates everything you need to build a Ruby gem with a Rust extension."}),"\n",(0,s.jsx)(n.h2,{id:"understanding-the-generated-files",children:"Understanding the Generated Files"}),"\n",(0,s.jsx)(n.p,{children:"Let's examine the key files Bundler created:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"hello_rusty/\n\u251c\u2500\u2500 ext/hello_rusty/          # Rust extension directory\n\u2502   \u251c\u2500\u2500 Cargo.toml            # Rust dependencies\n\u2502   \u251c\u2500\u2500 extconf.rb            # Ruby extension config\n\u2502   \u2514\u2500\u2500 src/lib.rs            # Rust code\n\u251c\u2500\u2500 lib/hello_rusty.rb        # Main Ruby file\n\u2514\u2500\u2500 hello_rusty.gemspec       # Gem specification\n"})}),"\n",(0,s.jsx)(n.h3,{id:"the-rust-code-librs",children:"The Rust Code (lib.rs)"}),"\n",(0,s.jsx)(n.p,{children:'Bundler generates a simple "Hello World" implementation:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// ext/hello_rusty/src/lib.rs\nuse magnus::{define_module, function, prelude::*, Error};\n\n#[magnus::init]\nfn init() -> Result<(), Error> {\n    let module = define_module("HelloRusty")?;\n    module.define_singleton_method("hello", function!(|| "Hello from Rust!", 0))?;\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"You can experiment with Rust syntax and standard library functions separately, but code that depends on the Ruby API won't run in isolation."})}),"\n",(0,s.jsx)(n.h3,{id:"the-extension-configuration-extconfrb",children:"The Extension Configuration (extconf.rb)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# ext/hello_rusty/extconf.rb\nrequire "mkmf"\nrequire "rb_sys/mkmf"\n\ncreate_rust_makefile("hello_rusty/hello_rusty")\n'})}),"\n",(0,s.jsx)(n.p,{children:"This file connects Ruby's build system to Cargo."}),"\n",(0,s.jsx)(n.h2,{id:"enhancing-the-default-implementation",children:"Enhancing the Default Implementation"}),"\n",(0,s.jsx)(n.p,{children:"Let's improve the default implementation by adding a simple class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// This is our enhanced implementation\nuse magnus::{define_module, define_class, function, method, prelude::*, Error, Ruby};\n\n// Define a struct to hold state\nstruct Greeter {\n    name: String,\n}\n\n// Implement Ruby wrapper for the struct\n#[magnus::wrap(class = "HelloRusty::Greeter")]\nimpl Greeter {\n    // Constructor\n    fn new(name: String) -> Self {\n        Greeter { name }\n    }\n\n    // Instance method\n    fn greet(&self) -> String {\n        format!("Hello, {}!", self.name)\n    }\n}\n\n// Module initialization function\n#[magnus::init]\nfn init(ruby: &Ruby) -> Result<(), Error> {\n    let module = ruby.define_module("HelloRusty")?;\n\n    // Define and configure the Greeter class\n    let class = module.define_class("Greeter", ruby.class_object())?;\n    class.define_singleton_method("new", function!(Greeter::new, 1))?;\n    class.define_method("greet", method!(Greeter::greet, 0))?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{title:"Additional functionality",type:"tip",children:[(0,s.jsx)(n.p,{children:"You can extend this example with more methods:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'impl Greeter {\n    fn greet_with_prefix(&self, prefix: String) -> String {\n        format!("{} Hello, {}!", prefix, self.name)\n    }\n}\n\n// And in the init function:\nclass.define_method("greet_with_prefix", method!(Greeter::greet_with_prefix, 1))?;\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"building-and-testing",children:"Building and Testing"}),"\n",(0,s.jsx)(n.h3,{id:"compile-the-extension",children:"Compile the Extension"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install dependencies and compile\nbundle install\nbundle exec rake compile\n"})}),"\n",(0,s.jsx)(n.p,{children:"What happens during compilation:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Ruby's ",(0,s.jsx)(n.code,{children:"mkmf"})," reads your ",(0,s.jsx)(n.code,{children:"extconf.rb"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"create_rust_makefile"})," generates a Makefile with Cargo commands"]}),"\n",(0,s.jsx)(n.li,{children:"Cargo compiles your Rust code to a dynamic library"}),"\n",(0,s.jsxs)(n.li,{children:["The binary is copied to ",(0,s.jsx)(n.code,{children:"lib/hello_rusty/hello_rusty.{so,bundle,dll}"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"run-the-tests",children:"Run the Tests"}),"\n",(0,s.jsx)(n.p,{children:"Bundler generates a basic test file. Let's update it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# test/test_hello_rusty.rb\nrequire "test_helper"\n\nclass TestHelloRusty < Minitest::Test\n  def test_that_it_has_a_version_number\n    refute_nil ::HelloRusty::VERSION\n  end\n\n  def test_greeter\n    greeter = HelloRusty::Greeter.new("Rustacean")\n    assert_equal "Hello, Rustacean!", greeter.greet\n  end\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"Run the tests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run the standard test suite\nbundle exec rake test\n"})}),"\n",(0,s.jsx)(n.h3,{id:"try-it-in-the-console",children:"Try It in the Console"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Start the console\nbundle exec bin/console\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once in the console, you can interact with your extension:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Create a new greeter object\ngreeter = HelloRusty::Greeter.new("World")\n\n# Call the greet method\nputs greeter.greet  # => "Hello, World!"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"customizing-the-build",children:"Customizing the Build"}),"\n",(0,s.jsx)(n.p,{children:"You can customize the build process with environment variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Release build (optimized)\nRB_SYS_CARGO_PROFILE=release bundle exec rake compile\n\n# With specific Cargo features\nRB_SYS_CARGO_FEATURES=feature1,feature2 bundle exec rake compile\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Remember that building in release mode will produce optimized, faster code but will increase compilation time."})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! You've created a Ruby gem with a Rust extension. In the next chapters, we'll explore:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Better project organization"}),"\n",(0,s.jsx)(n.li,{children:"Working with Ruby objects in Rust"}),"\n",(0,s.jsx)(n.li,{children:"Memory management and safety"}),"\n",(0,s.jsx)(n.li,{children:"Performance optimization"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);